<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>HmCoding&#39;s Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://hmcoding.cn/"/>
  <updated>2020-05-14T07:41:46.078Z</updated>
  <id>https://hmcoding.cn/</id>
  
  <author>
    <name>HmCoding</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Spring Boot整合JPA</title>
    <link href="https://hmcoding.cn/2019/09/21/Spring%20Boot%E6%95%B4%E5%90%88JPA/"/>
    <id>https://hmcoding.cn/2019/09/21/Spring%20Boot%E6%95%B4%E5%90%88JPA/</id>
    <published>2019-09-20T16:00:00.000Z</published>
    <updated>2020-05-14T07:41:46.078Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="Spring-Boot整合JPA"><a href="#Spring-Boot整合JPA" class="headerlink" title="Spring Boot整合JPA"></a>Spring Boot整合JPA</h1><p>项目地址：<a href="https://github.com/hmc7660/springboot-learn" target="_blank" rel="noopener">springboot-learn</a></p><p>JPA是Java Persistence API， Java持久层API。它是参照ORM思想再用Java语法做出来的一套规范。</p><p>Spring Data JPA是基于ORM框架、JPA规范的基础上封装的一套JPA应用框架，可使开发者用极简的代码即可实现对数据库的访问和操作。</p><p>Spring Data JPA简化了数据库访问层代码（DAO层只需要写接口，就自动具备了增删改查、分页查询等方法），基本上的CRUD都可以依赖于它来实现，可以使用Spring Data JPA+ORM(例如：Hibernate)完成操作，这样在切换不同的ORM框架时提供了极大的方便，同时也使数据库层操作更加简单，方便解耦！</p><h2 id="搭建环境"><a href="#搭建环境" class="headerlink" title="搭建环境"></a>搭建环境</h2><h3 id="新建一个Springboot项目导入依赖"><a href="#新建一个Springboot项目导入依赖" class="headerlink" title="新建一个Springboot项目导入依赖"></a>新建一个Springboot项目导入依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-jpa<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="配置参数application-yml"><a href="#配置参数application-yml" class="headerlink" title="配置参数application.yml"></a>配置参数application.yml</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/springboot_jpa?serverTimezone=UTC&amp;useUnicode=true&amp;characterEncoding=utf-8</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">你的数据库配置</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">你的数据库配置</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">  <span class="attr">jpa:</span></span><br><span class="line">    <span class="attr">show-sql:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">hibernate:</span></span><br><span class="line">      <span class="attr">ddl-auto:</span> <span class="string">update</span></span><br><span class="line">    <span class="attr">database-platform:</span> <span class="string">org.hibernate.dialect.MySQL5InnoDBDialect</span></span><br></pre></td></tr></table></figure><p>ddl-auto: update    程序运行时创建表（如果有表，则不会创建表）</p><p><strong>注意：JPA不能自动创建数据库，需要自己手动去创建</strong></p><h3 id="编写实体类Customer"><a href="#编写实体类Customer" class="headerlink" title="编写实体类Customer"></a>编写实体类Customer</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Table</span>(name = <span class="string">"tb_customer"</span>)</span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Customer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue</span>(strategy = GenerationType.IDENTITY)</span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"cust_id"</span>)</span><br><span class="line">    <span class="keyword">private</span> Long custId;</span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"cust_address"</span>)</span><br><span class="line">    <span class="keyword">private</span> String custAddress;</span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"cust_industry"</span>)</span><br><span class="line">    <span class="keyword">private</span> String custIndustry;</span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"cust_level"</span>)</span><br><span class="line">    <span class="keyword">private</span> String custLevel;</span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"cust_name"</span>)</span><br><span class="line">    <span class="keyword">private</span> String custName;</span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"cust_phone"</span>)</span><br><span class="line">    <span class="keyword">private</span> String custPhone;</span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"cust_source"</span>)</span><br><span class="line">    <span class="keyword">private</span> String custSource;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>各注解声明如下：<br><strong>@Entity</strong>        声明实体类<br><strong>@Table(name=””)</strong>        配置实体类和表的映射关系，name属性：配置数据库表的名称<br><strong>@Id</strong>     声明主键的配置<br><strong>@GeneratedValue(stratrgy = GenerationType.IDENTITY)</strong>        配置主键的生成策略<br><strong>@Column(name=””)</strong>     配置属性和字段的映射关系<br><strong>@Data</strong>    lombok插件注解，为属性自动生成getter/setter/toString方法</p><h3 id="编写一个符合Spring-Data-JPA-的dao层接口"><a href="#编写一个符合Spring-Data-JPA-的dao层接口" class="headerlink" title="编写一个符合Spring Data JPA 的dao层接口"></a>编写一个符合Spring Data JPA 的dao层接口</h3><ul><li>只需要编写dao层接口，不需要编写dao层接口的实现类</li><li>dao层接口规范<ul><li>需要继承两个接口并提供响应的泛型（JpaRepository&lt;T, ID&gt;、JpaSpecificationExecutor<T>）</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *      JpaRepository&lt;操作的实体类类型,实体类中主键属性的类型&gt;</span></span><br><span class="line"><span class="comment"> *          *   封装了基本的CRUD操作</span></span><br><span class="line"><span class="comment"> *      JpaSpecificationExecutor&lt;操作的实体类类型&gt;</span></span><br><span class="line"><span class="comment"> *          *   封装了复杂查询（分页）</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">CustomerDao</span> <span class="keyword">extends</span> <span class="title">JpaRepository</span>&lt;<span class="title">Customer</span>,<span class="title">Long</span>&gt;, <span class="title">JpaSpecificationExecutor</span>&lt;<span class="title">Customer</span>&gt; </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="测试CRUD操作"><a href="#测试CRUD操作" class="headerlink" title="测试CRUD操作"></a>测试CRUD操作</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith</span>(SpringRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">SpringBootTest</span></span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">CustomerDaoTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> CustomerDao customerDao;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 更具id查询</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindOne</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        Customer customer = customerDao.findById(<span class="number">1L</span>).get();</span><br><span class="line">        System.out.println(customer);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * save : 保存或者更新</span></span><br><span class="line"><span class="comment">     *      根据传递的对象是否存在主键id，</span></span><br><span class="line"><span class="comment">     *      如果没有id主键属性：保存</span></span><br><span class="line"><span class="comment">     *      存在id主键属性，根据id查询数据，更新数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSave</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Customer customer = <span class="keyword">new</span> Customer();</span><br><span class="line">        customer.setCustName(<span class="string">"测试保存"</span>);</span><br><span class="line">        customer.setCustLevel(<span class="string">"test"</span>);</span><br><span class="line">        customer.setCustIndustry(<span class="string">"测试"</span>);</span><br><span class="line">        customerDao.save(customer);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试更新</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testUpdate</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Customer customer = <span class="keyword">new</span> Customer();</span><br><span class="line">        customer.setCustId(<span class="number">2L</span>);</span><br><span class="line">        customer.setCustName(<span class="string">"测试更新"</span>);</span><br><span class="line">        customerDao.save(customer);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试删除</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDelete</span><span class="params">()</span></span>&#123;</span><br><span class="line">        customerDao.deleteById(<span class="number">2L</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询所有</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindAll</span><span class="params">()</span></span>&#123;</span><br><span class="line">        List&lt;Customer&gt; list = customerDao.findAll();</span><br><span class="line">        <span class="keyword">for</span> (Customer customer : list) &#123;</span><br><span class="line">            System.out.println(customer);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="JPQL查询"><a href="#JPQL查询" class="headerlink" title="JPQL查询"></a>JPQL查询</h2><p><strong>特点：</strong></p><ul><li>语法或关键字和sql语句类似</li><li>查询的是类和类中的属性</li></ul><ul><li>需要在dao接口上配置方法</li><li>在新添加的方法上，使用注解的形式配置JPQL查询语句</li><li>注解  ： @Query</li></ul><p><strong>dao接口配置方法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *      JpaRepository&lt;操作的实体类类型,实体类中主键属性的类型&gt;</span></span><br><span class="line"><span class="comment"> *          *   封装了基本的CRUD操作</span></span><br><span class="line"><span class="comment"> *      JpaSpecificationExecutor&lt;操作的实体类类型&gt;</span></span><br><span class="line"><span class="comment"> *          *   封装了复杂查询（分页）</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">CustomerDao</span> <span class="keyword">extends</span> <span class="title">JpaRepository</span>&lt;<span class="title">Customer</span>,<span class="title">Long</span>&gt;, <span class="title">JpaSpecificationExecutor</span>&lt;<span class="title">Customer</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据客户名称查询客户</span></span><br><span class="line"><span class="comment">     * jpql: from Customer where custName = ?1</span></span><br><span class="line"><span class="comment">     * 配置jpql语句，使用的<span class="doctag">@Query</span>注解</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Query</span>(value = <span class="string">"from Customer where custName = ?1"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Customer <span class="title">findJpql</span><span class="params">(String custName)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据客户名称和客户id查询客户</span></span><br><span class="line"><span class="comment">     * jpql：from Customer where custName = ?1 and custId = ?2</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Query</span>(value = <span class="string">"from Customer where custName = ?1 and custId = ?2"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Customer <span class="title">findCustNameAndId</span><span class="params">(String custName, Long custId)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据id更新客户的名称</span></span><br><span class="line"><span class="comment">     * jpql : update Customer set custName = ? where custId = ?</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Query</span>(value = <span class="string">"update Customer set custName = ?2 where custId = ?1"</span>)</span><br><span class="line">    <span class="meta">@Modifying</span>  <span class="comment">//增删改操作需要加上该注解</span></span><br><span class="line">    <span class="meta">@Transactional</span>    <span class="comment">//事务的支持</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateCustomer</span><span class="params">(Long custId,String custName)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>测试</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith</span>(SpringRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">SpringBootTest</span></span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">JpqlTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> CustomerDao customerDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindJPQL</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Customer customer = customerDao.findJpql(<span class="string">"测试"</span>);</span><br><span class="line">        System.out.println(customer);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindCustNameAndId</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Customer customer = customerDao.findCustNameAndId(<span class="string">"测试"</span>, <span class="number">4L</span>);</span><br><span class="line">        System.out.println(customer);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试更新操作</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testUpdateCustomer</span><span class="params">()</span></span>&#123;</span><br><span class="line">        customerDao.updateCustomer(<span class="number">4L</span>,<span class="string">"测试jpql更新操作"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="SQL语句的查询"><a href="#SQL语句的查询" class="headerlink" title="SQL语句的查询"></a>SQL语句的查询</h2><ul><li>需要在dao接口上配置方法</li><li>在新添加的方法上，使用注解的形式配置SQL查询语句</li><li>注解  ： @Query<ul><li>nativeQuery：false（默认值，使用jpql查询） |  true （使用本地查询：SQL查询）</li></ul></li></ul><p><strong>dao接口配置方法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">CustomerDao</span> <span class="keyword">extends</span> <span class="title">JpaRepository</span>&lt;<span class="title">Customer</span>,<span class="title">Long</span>&gt;, <span class="title">JpaSpecificationExecutor</span>&lt;<span class="title">Customer</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 使用SQL的形式查询</span></span><br><span class="line"><span class="comment">     * 查询全部的客户</span></span><br><span class="line"><span class="comment">     * select * from tb_customer;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Query</span>(value = <span class="string">"select * from tb_customer"</span>,nativeQuery = <span class="keyword">true</span>)</span><br><span class="line">    <span class="keyword">public</span> List&lt;Object []&gt; findSql();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 模糊查询</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> custName</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Query</span>(value = <span class="string">"select * from tb_customer where cust_name like ?1"</span>,nativeQuery = <span class="keyword">true</span>)</span><br><span class="line">    <span class="keyword">public</span> List&lt;Object []&gt; findSqlLike(String custName);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>测试</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith</span>(SpringRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">SpringBootTest</span></span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">JpqlTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> CustomerDao customerDao;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试SQL查询</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindSql</span><span class="params">()</span></span>&#123;</span><br><span class="line">        List&lt;Object[]&gt; list = customerDao.findSql();</span><br><span class="line">        <span class="keyword">for</span> (Object[] objects : list) &#123;</span><br><span class="line">            System.out.println(Arrays.toString(objects));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试模糊查询</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindSqlLike</span><span class="params">()</span></span>&#123;</span><br><span class="line">        List&lt;Object[]&gt; list = customerDao.findSqlLike(<span class="string">"测试%"</span>);</span><br><span class="line">        <span class="keyword">for</span> (Object[] objects : list) &#123;</span><br><span class="line">            System.out.println(Arrays.toString(objects));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="方法名称规则查询"><a href="#方法名称规则查询" class="headerlink" title="方法名称规则查询"></a>方法名称规则查询</h2><p>是对jpql查询更为深入的一层封装，只需要按照SpringDataJpa提供的方法名称规则定义方法，不需要再定义jpql语句，也可以完成查询。</p><p><strong>dao接口配置方法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">CustomerDao</span> <span class="keyword">extends</span> <span class="title">JpaRepository</span>&lt;<span class="title">Customer</span>,<span class="title">Long</span>&gt;, <span class="title">JpaSpecificationExecutor</span>&lt;<span class="title">Customer</span>&gt; </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * findBy查询</span></span><br><span class="line"><span class="comment">     * 命名规则：findBy + 对象中属性名称（首字母大写）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Customer <span class="title">findByCustName</span><span class="params">(String custName)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 模糊查询</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Customer&gt; <span class="title">findByCustNameLike</span><span class="params">(String custName)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 多条件查询</span></span><br><span class="line"><span class="comment">     * 使用客户名称模糊查询和客户所属行业精准匹配查询</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Customer <span class="title">findByCustNameLikeAndCustIndustry</span><span class="params">(String custName,String custIndustry)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>测试</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试方法名称规则的查询</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindByCustName</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Customer customer = customerDao.findByCustName(<span class="string">"测试"</span>);</span><br><span class="line">    System.out.println(customer);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试方法名称规则的查询</span></span><br><span class="line"><span class="comment"> * 模糊查询</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindByCustNameLike</span><span class="params">()</span></span>&#123;</span><br><span class="line">    List&lt;Customer&gt; list = customerDao.findByCustNameLike(<span class="string">"测试%"</span>);</span><br><span class="line">    <span class="keyword">for</span> (Customer customer : list) &#123;</span><br><span class="line">        System.out.println(customer);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试方法名称规则的查询</span></span><br><span class="line"><span class="comment"> * 多条件查询</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindByCustNameLikeAndCustIndustry</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Customer customer = customerDao.findByCustNameLikeAndCustIndustry(<span class="string">"测试%"</span>, <span class="string">"互联网"</span>);</span><br><span class="line">    System.out.println(customer);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="动态查询"><a href="#动态查询" class="headerlink" title="动态查询"></a>动态查询</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith</span>(SpringRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">SpringBootTest</span></span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">SpecTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> CustomerDao customerDao;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据条件查询单个对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSpec</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 自定义查询条件</span></span><br><span class="line"><span class="comment">         *  1.实现Specification接口（提供泛型，查询的对象类型）</span></span><br><span class="line"><span class="comment">         *  2.实现toPredicate方法（构造查询条件）</span></span><br><span class="line"><span class="comment">         *  3.需要借助方法参数中的两个参数（</span></span><br><span class="line"><span class="comment">         *      root：获取需要查询的对象属性</span></span><br><span class="line"><span class="comment">         *      CriteriaBuilder：构造查询条件，内部封装了很多查询条件</span></span><br><span class="line"><span class="comment">         *      ）</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        Specification&lt;Customer&gt; spec = <span class="keyword">new</span> Specification&lt;Customer&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> Predicate <span class="title">toPredicate</span><span class="params">(Root&lt;Customer&gt; root, CriteriaQuery&lt;?&gt; query, CriteriaBuilder cb)</span> </span>&#123;</span><br><span class="line">                <span class="comment">//1.获取比较的属性</span></span><br><span class="line">                Path&lt;Object&gt; custName = root.get(<span class="string">"custName"</span>);</span><br><span class="line">                <span class="comment">//2.构造查询条件（第一个参数：需要比较的属性（path对象），第二个参数：当前需要比较的取值）</span></span><br><span class="line">                Predicate predicate = cb.equal(custName, <span class="string">"测试"</span>);<span class="comment">//进行精准匹配</span></span><br><span class="line">                <span class="keyword">return</span> predicate;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        Customer customer = customerDao.findOne(spec).get();</span><br><span class="line">        System.out.println(customer);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 多条件动态查询</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSpec1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Specification&lt;Customer&gt; spec = <span class="keyword">new</span> Specification&lt;Customer&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> Predicate <span class="title">toPredicate</span><span class="params">(Root&lt;Customer&gt; root, CriteriaQuery&lt;?&gt; query, CriteriaBuilder cb)</span> </span>&#123;</span><br><span class="line">                Path&lt;Object&gt; custName = root.get(<span class="string">"custName"</span>);</span><br><span class="line">                Path&lt;Object&gt; custIndustry = root.get(<span class="string">"custIndustry"</span>);</span><br><span class="line">                Predicate p1 = cb.equal(custName, <span class="string">"测试"</span>);</span><br><span class="line">                Predicate p2 = cb.equal(custIndustry, <span class="string">"互联网"</span>);</span><br><span class="line">                Predicate predicate = cb.and(p1, p2);   <span class="comment">//以与的形式拼接查询条件</span></span><br><span class="line">                <span class="keyword">return</span> predicate;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        Customer customer = customerDao.findOne(spec).get();</span><br><span class="line">        System.out.println(customer);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据客户名称模糊匹配，返回客户列表</span></span><br><span class="line"><span class="comment">     * gt,lt,le,like:需要得到path对象，根据path指定比较的参数类型，再去进行比较</span></span><br><span class="line"><span class="comment">     *      指定类型：path.as(类型的字节码对象)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSpec3</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Specification&lt;Customer&gt; spec = <span class="keyword">new</span> Specification&lt;Customer&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> Predicate <span class="title">toPredicate</span><span class="params">(Root&lt;Customer&gt; root, CriteriaQuery&lt;?&gt; query, CriteriaBuilder cb)</span> </span>&#123;</span><br><span class="line">                Path&lt;Object&gt; custName = root.get(<span class="string">"custName"</span>);</span><br><span class="line">                Predicate predicate = cb.like(custName.as(String.class), "测试%");</span><br><span class="line">                <span class="keyword">return</span> predicate;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        List&lt;Customer&gt; list = customerDao.findAll(spec);</span><br><span class="line">        <span class="keyword">for</span> (Customer customer : list) &#123;</span><br><span class="line">            System.out.println(customer);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 排序</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSpec4</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Specification&lt;Customer&gt; spec = <span class="keyword">new</span> Specification&lt;Customer&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> Predicate <span class="title">toPredicate</span><span class="params">(Root&lt;Customer&gt; root, CriteriaQuery&lt;?&gt; query, CriteriaBuilder cb)</span> </span>&#123;</span><br><span class="line">                Path&lt;Object&gt; custName = root.get(<span class="string">"custName"</span>);</span><br><span class="line">                Predicate predicate = cb.like(custName.as(String.class), "测试%");</span><br><span class="line">                <span class="keyword">return</span> predicate;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 创建排序对象</span></span><br><span class="line"><span class="comment">         * 第一个参数：排序的顺序（倒序，正序）</span></span><br><span class="line"><span class="comment">         * 第二个参数：排序的属性名称</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        Sort sort = <span class="keyword">new</span> Sort(Sort.Direction.DESC,<span class="string">"custId"</span>);</span><br><span class="line">        List&lt;Customer&gt; list = customerDao.findAll(spec,sort);</span><br><span class="line">        <span class="keyword">for</span> (Customer customer : list) &#123;</span><br><span class="line">            System.out.println(customer);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 分页查询</span></span><br><span class="line"><span class="comment">     *      Specification：查询条件</span></span><br><span class="line"><span class="comment">     *      Pageable：分页参数</span></span><br><span class="line"><span class="comment">     *          分页参数：查询的页码,每页查询的条数</span></span><br><span class="line"><span class="comment">     *      findAll(Specification,Pageable)：带有条件的分页</span></span><br><span class="line"><span class="comment">     *      findAll(Pageable)：没有条件的分页</span></span><br><span class="line"><span class="comment">     *      返回：Page（SpringDataJpa封装好的pageBean对象，数据列表，总条数...）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSpec5</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 使用PageRequest.of构建Pageable，需要传入两个参数</span></span><br><span class="line"><span class="comment">         *      第一个参数：当前查询的页数（从0开始，即0表示查询的是第一页）</span></span><br><span class="line"><span class="comment">         *      第二个参数：每页查询的数量</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        Pageable pageable = PageRequest.of(<span class="number">0</span>,<span class="number">2</span>);</span><br><span class="line">        Page&lt;Customer&gt; page = customerDao.findAll(pageable);</span><br><span class="line">        System.out.println(page.getTotalElements());<span class="comment">//得到总条数</span></span><br><span class="line">        System.out.println(page.getContent());<span class="comment">//得到数据集合列表</span></span><br><span class="line">        System.out.println(page.getTotalPages());<span class="comment">//得到总页数</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意：</strong>在<code>Mybatis</code> 可以使用 <code>PageHelper</code> 实现后端分页效果，而在JPA中，它本身提供了分页查询的方法（Pageable），之前在用<code>PageHelper</code>的时候，默认第一页是<code>1</code>，这样查询出来就是数据库第一页的内容。<strong>但是</strong>，使用了JPA发现它的页码是从<code>0</code>开始的，也就是说0=第一页、1=第二页…，这和PageHelper差别还是蛮大的，需要注意一下！</p><h2 id="多表操作"><a href="#多表操作" class="headerlink" title="多表操作"></a>多表操作</h2><h3 id="一对多操作"><a href="#一对多操作" class="headerlink" title="一对多操作"></a>一对多操作</h3><ul><li><p>以客户（相当于公司）和联系人（相当于员工）为例：一个客户（公司）有多名联系人（员工），一名联系人（员工）只属于一个客户（公司）</p></li><li><p>确定表关系：</p><ul><li>主表：客户表</li><li>从表：联系人表，在从表上添加外键</li></ul></li><li><p>编写实体类，并在实体类中描述表关系</p><ul><li>客户：在客户的实体类中包含一个联系人的集合</li><li>联系人：在联系人的实体类中包含一个客户的对象</li></ul></li></ul><ul><li>实体类在<strong>domain</strong>包下：Customer.java,       LinkMan.java</li><li>测试代码：OneToManyTest.java</li></ul><h3 id="多对多操作"><a href="#多对多操作" class="headerlink" title="多对多操作"></a>多对多操作</h3><ul><li>以用户和角色为例：一个用户可以有多个角色，一个角色对应多个用户</li><li>确定表关系：<ul><li>中间表</li></ul></li><li>编写实体类，并在实体类中描述表关系<ul><li>用户：包含角色集合</li><li>角色：包含用户集合</li></ul></li></ul><ul><li>实体类在<strong>bean</strong>包下：User.java,      role.java</li><li>测试代码：ManyToManyTest.java</li></ul><h2 id="对象导航查询"><a href="#对象导航查询" class="headerlink" title="对象导航查询"></a>对象导航查询</h2><ul><li>查询一个对象的同时，通过此对象查询他的关联对象<ul><li>以客户和联系人（一对多）为例</li></ul></li></ul><ul><li>测试代码：ObjectQueryTest.java</li></ul><p><strong>小结：</strong></p><ul><li>从一方查询多方，默认使用延迟加载</li><li>从多方查询一方，默认使用立即加载</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="后端开发" scheme="https://hmcoding.cn/categories/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="Java" scheme="https://hmcoding.cn/tags/Java/"/>
    
      <category term="Spring Data JPA" scheme="https://hmcoding.cn/tags/Spring-Data-JPA/"/>
    
      <category term="SpringBoot" scheme="https://hmcoding.cn/tags/SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot整合MyBatis</title>
    <link href="https://hmcoding.cn/2019/08/20/Spring%20Boot%E6%95%B4%E5%90%88MyBatis/"/>
    <id>https://hmcoding.cn/2019/08/20/Spring%20Boot%E6%95%B4%E5%90%88MyBatis/</id>
    <published>2019-08-19T16:00:00.000Z</published>
    <updated>2020-05-14T07:13:06.669Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="Spring-Boot整合MyBatis"><a href="#Spring-Boot整合MyBatis" class="headerlink" title="Spring Boot整合MyBatis"></a>Spring Boot整合MyBatis</h1><p>项目地址：<a href="https://github.com/hmc7660/springboot-learn" target="_blank" rel="noopener">springboot-learn</a></p><p>在之前的SSM整合入门中已经使用过了Mybatis，再加上也初体验了一波Spring Boot，现在来完成Spring Boot整合MyBatis。</p><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><p><strong>引入依赖</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>初始化数据库</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- create database ssm charset utf-8;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> <span class="string">`tb_customer`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`tb_customer`</span> (</span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  <span class="string">`name`</span> <span class="built_in">varchar</span>(<span class="number">100</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`telephone`</span> <span class="built_in">varchar</span>(<span class="number">100</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`address`</span> <span class="built_in">varchar</span>(<span class="number">100</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`remark`</span> <span class="built_in">varchar</span>(<span class="number">100</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> AUTO_INCREMENT=<span class="number">9</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8;</span><br></pre></td></tr></table></figure><h2 id="基于注解形式"><a href="#基于注解形式" class="headerlink" title="基于注解形式"></a>基于注解形式</h2><p>MyBatis提供了@Select<code>,</code>@Update<code>,</code>@Insert<code>,</code>@Delete四种注解，用来实现增删改查。</p><p><strong>为接口生成动态代理类的方式有两种 (二者选其一即可)：</strong></p><ul><li>在Mapper接口上使用@Mapper注解</li><li>在SpringBoot的启动类上使用@MapperScan(basePackages = “接口所在包路径”)注解</li></ul><p><strong>配置数据源相关参数</strong></p><p>这里使用application.yml的形式来配置</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/ssm?serverTimezone=UTC&amp;useUnicode=true&amp;characterEncoding=utf-8</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">你的数据库配置</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">你的数据库配置</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br></pre></td></tr></table></figure><p><strong>创建Customer实体类：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Customer</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String telephone;</span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line">    <span class="keyword">private</span> String remark;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>创建CustomerMapper接口</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">CustomerMapper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Select</span>(<span class="string">"select * from tb_customer"</span>)</span><br><span class="line">    <span class="function">List&lt;Customer&gt; <span class="title">queryCustomerList</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Select</span>(<span class="string">"select * from tb_customer where id = #&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function">Customer <span class="title">queryCustomerById</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Insert</span>(<span class="string">"insert into tb_customer (name,telephone,address,remark) value(#&#123;name&#125;,#&#123;telephone&#125;,#&#123;address&#125;,#&#123;remark&#125;)"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">addCustomer</span><span class="params">(Customer customer)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Update</span>(<span class="string">"update tb_customer set name=#&#123;name&#125;,telephone=#&#123;telephone&#125;,address=#&#123;address&#125;,remark=#&#123;remark&#125; where id=#&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">updateCustomer</span><span class="params">(Customer customer)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Delete</span>(<span class="string">"delete from tb_customer where id=#&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">deleteCustomer</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>创建测试类进行测试</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith</span>(SpringRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">SpringBootTest</span></span></span><br><span class="line"><span class="class">@<span class="title">Slf4j</span></span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">CustomerMapperTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> CustomerMapper customerMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testQueryCustomerList</span><span class="params">()</span></span>&#123;</span><br><span class="line">        List&lt;Customer&gt; customerList = customerMapper.queryCustomerList();</span><br><span class="line">        customerList.forEach(customer -&gt; &#123;</span><br><span class="line">            log.info(<span class="string">"customer=&#123;&#125;"</span>,customer);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testQueryCustomerById</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Customer customer = customerMapper.queryCustomerById(<span class="number">1</span>);</span><br><span class="line">        log.info(<span class="string">"customer=&#123;&#125;"</span>,customer);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testAddCustomer</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Customer customer = <span class="keyword">new</span> Customer();</span><br><span class="line">        customer.setName(<span class="string">"测试新增"</span>);</span><br><span class="line">        customer.setTelephone(<span class="string">"135xxxx6542"</span>);</span><br><span class="line">        customer.setAddress(<span class="string">"长沙"</span>);</span><br><span class="line">        customer.setRemark(<span class="string">"备注"</span>);</span><br><span class="line">        customerMapper.addCustomer(customer);</span><br><span class="line">        testQueryCustomerList();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testUpdateCustomer</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Customer customer = customerMapper.queryCustomerById(<span class="number">1</span>); <span class="comment">//先查询再修改</span></span><br><span class="line">        customer.setName(<span class="string">"测试修改"</span>);</span><br><span class="line">        customerMapper.updateCustomer(customer);</span><br><span class="line">        testQueryCustomerList();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDeleteCustomer</span><span class="params">()</span></span>&#123;</span><br><span class="line">        customerMapper.deleteCustomer(<span class="number">4</span>);</span><br><span class="line">        testQueryCustomerList();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="基于XML的形式"><a href="#基于XML的形式" class="headerlink" title="基于XML的形式"></a>基于XML的形式</h2><p><strong>配置数据源相关参数</strong></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://192.168.88.130:3306/ssm?serverTimezone=UTC&amp;useUnicode=true&amp;characterEncoding=utf-8</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"></span><br><span class="line"><span class="attr">mybatis:</span></span><br><span class="line">  <span class="attr">type-aliases-package:</span> <span class="string">cn.hmc.pojo</span></span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">classpath:mapper/*.xml</span> <span class="comment">#指定mapper.xml文件的路径</span></span><br></pre></td></tr></table></figure><ul><li>type-aliases-package: cn.hmc.pojo开启别名，这样CustomerMapper.xml中parameterType=”Customer” resultType=”Customer”可以直接写Customer而不需要再写全限定类名了。</li></ul><p><strong>创建CustomerMapper接口</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">CustomerMapper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function">List&lt;Customer&gt; <span class="title">queryCustomerList</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">Customer <span class="title">queryCustomerById</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">addCustomer</span><span class="params">(Customer customer)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">updateCustomer</span><span class="params">(Customer customer)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">deleteCustomer</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>CustomerMapper.xml</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Mapper 3.0//EN"</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"cn.hmc.mapper.CustomerMapper"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"queryCustomerList"</span> <span class="attr">resultType</span>=<span class="string">"Customer"</span>&gt;</span></span><br><span class="line">        select * from tb_customer</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"queryCustomerById"</span> <span class="attr">parameterType</span>=<span class="string">"int"</span> <span class="attr">resultType</span>=<span class="string">"Customer"</span>&gt;</span></span><br><span class="line">        select * from tb_customer where id = #&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"addCustomer"</span> <span class="attr">parameterType</span>=<span class="string">"Customer"</span>&gt;</span></span><br><span class="line">        insert into tb_customer (name,telephone,address,remark) </span><br><span class="line">        value(#&#123;name&#125;,#&#123;telephone&#125;,#&#123;address&#125;,#&#123;remark&#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">"updateCustomer"</span> <span class="attr">parameterType</span>=<span class="string">"Customer"</span>&gt;</span></span><br><span class="line">        update tb_customer </span><br><span class="line">        set name=#&#123;name&#125;,</span><br><span class="line">        telephone=#&#123;telephone&#125;,</span><br><span class="line">        address=#&#123;address&#125;,</span><br><span class="line">        remark=#&#123;remark&#125; </span><br><span class="line">        where id=#&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">"deleteCustomer"</span> <span class="attr">parameterType</span>=<span class="string">"int"</span>&gt;</span></span><br><span class="line">        delete from tb_customer where id=#&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>CustomerMapper.xml中id值对应CustomerMapper接口中的方法名，parameterType对应接口中方法的参数类型，resultType对应接口中方法的返回值类型。</li></ul><p><strong>创建测试类进行测试</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith</span>(SpringRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">SpringBootTest</span></span></span><br><span class="line"><span class="class">@<span class="title">Slf4j</span></span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">CustomerMapperTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> CustomerMapper customerMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testQueryCustomerList</span><span class="params">()</span></span>&#123;</span><br><span class="line">        List&lt;Customer&gt; customerList = customerMapper.queryCustomerList();</span><br><span class="line">        customerList.forEach(customer -&gt; &#123;</span><br><span class="line">            log.info(<span class="string">"customer=&#123;&#125;"</span>,customer);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testQueryCustomerById</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Customer customer = customerMapper.queryCustomerById(<span class="number">1</span>);</span><br><span class="line">        log.info(<span class="string">"customer=&#123;&#125;"</span>,customer);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testAddCustomer</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Customer customer = <span class="keyword">new</span> Customer();</span><br><span class="line">        customer.setName(<span class="string">"测试新增"</span>);</span><br><span class="line">        customer.setTelephone(<span class="string">"135xxxx6542"</span>);</span><br><span class="line">        customer.setAddress(<span class="string">"长沙"</span>);</span><br><span class="line">        customer.setRemark(<span class="string">"备注"</span>);</span><br><span class="line">        customerMapper.addCustomer(customer);</span><br><span class="line">        testQueryCustomerList();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testUpdateCustomer</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Customer customer = customerMapper.queryCustomerById(<span class="number">1</span>); <span class="comment">//先查询再修改</span></span><br><span class="line">        customer.setName(<span class="string">"测试修改"</span>);</span><br><span class="line">        customerMapper.updateCustomer(customer);</span><br><span class="line">        testQueryCustomerList();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDeleteCustomer</span><span class="params">()</span></span>&#123;</span><br><span class="line">        customerMapper.deleteCustomer(<span class="number">4</span>);</span><br><span class="line">        testQueryCustomerList();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>小结</strong></p><p>注解形式和XML形式配合使用会比较好，简单的操作可以使用注解实现，复杂的查询，比如Mybatis的动态SQL特性在注解中应该很难体现，而在XML中就很容易实现了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="后端开发" scheme="https://hmcoding.cn/categories/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="Java" scheme="https://hmcoding.cn/tags/Java/"/>
    
      <category term="MyBatis" scheme="https://hmcoding.cn/tags/MyBatis/"/>
    
      <category term="SpringBoot" scheme="https://hmcoding.cn/tags/SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot初体验</title>
    <link href="https://hmcoding.cn/2019/08/10/Spring%20Boot%E5%88%9D%E4%BD%93%E9%AA%8C/"/>
    <id>https://hmcoding.cn/2019/08/10/Spring%20Boot%E5%88%9D%E4%BD%93%E9%AA%8C/</id>
    <published>2019-08-09T16:00:00.000Z</published>
    <updated>2020-05-14T07:33:45.952Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="Spring-Boot初体验"><a href="#Spring-Boot初体验" class="headerlink" title="Spring Boot初体验"></a>Spring Boot初体验</h1><p>回顾之前的SSM整合项目，搭建过程还是比较繁琐的，需要配置web.xml，在application.xml中配置注解扫描、注解驱动，配置数据库链接、配置加载配置文件的读取，大量的配置文件让人感到非常的头大，并且在搭建Spring项目时还需要考虑依赖版本的冲突问题。<br>SpringBoot的出现将这些问题都解决了，只需要非常少的几个配置就可以搭建起来一个 Web 项目，并且利用 IDEA 可以自动生成，这简直是太爽了…</p><h2 id="Spring-Boot项目搭建"><a href="#Spring-Boot项目搭建" class="headerlink" title="Spring Boot项目搭建"></a>Spring Boot项目搭建</h2><blockquote><p>1.在IDEA中选择新建项目，选择Spring Initializr，并选择本地的JDK版本</p></blockquote><p><img src="//tva2.sinaimg.cn/large/75e34a99gy1geogax9xqlj20nw0m5gm5.jpg" alt=""></p><blockquote><p>2.点击Next，指定Group和Artifact名称，并选择本机JDK版本</p></blockquote><p><img src="//tvax1.sinaimg.cn/large/75e34a99gy1geoghmxkjcj20nx0m50t0.jpg" alt=""></p><blockquote><p>2.点击Next选择项目所需依赖</p></blockquote><p><img src="//tvax3.sinaimg.cn/large/75e34a99gy1geogkr85iaj20nv0m23zd.jpg" alt=""></p><p>里面提供了非常多的依赖可供选择，但是这里我只选择一个web依赖，做一个简单的测试。</p><h2 id="Spring-Boot项目结构"><a href="#Spring-Boot项目结构" class="headerlink" title="Spring Boot项目结构"></a>Spring Boot项目结构</h2><p><img src="//tva3.sinaimg.cn/large/75e34a99gy1geogrwkcboj20f20dzglw.jpg" alt=""></p><h3 id="首先看下启动类"><a href="#首先看下启动类" class="headerlink" title="首先看下启动类"></a>首先看下启动类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringbootApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(SpringbootApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如上，仅是一个简单的main方法，其中最核心的就是<code>@SpringBootApplication</code>注解，它是一下三个注解的总和：</p><ol><li><code>@Configuration</code>: 用于定义一个配置类。</li><li><code>@EnableAutoConfiguration</code>: SpringBoot会自动根据你的jar包依赖来自动配置项目。</li><li><code>@ComponentSacn</code>: 告诉Spring哪个packages的用注解标识的类会被Spring自动扫描并且转入Bean容器。</li></ol><p>通过以上三个注解你就应该了解到了SpringBoot的作用：自动化配置项目。之前我们要手动进行的XML配置在这里仅需要这一个注解就完成了。且SpringBoot项目不需要单独部署到Tomcat中才能启动，通过这个启动器，SpringBoot会自动构建一个web容器，并将项目部署到其中。</p><h3 id="测试HelloController"><a href="#测试HelloController" class="headerlink" title="测试HelloController"></a>测试HelloController</h3><p>在SpringbootApplication启动类同一级的包下新建一个controller包，并新建一个HelloController的类：</p><p>@RestController 注解： 该注解是 @Controller 和 @ResponseBody 注解的合体版</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/Hello"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">Hello</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Helloo SpringBoot"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过启动类启动，并打开浏览器访问<a href="http://localhost:8080/Hello" target="_blank" rel="noopener">http://localhost:8080/Hello</a></p><p><img src="//tva3.sinaimg.cn/large/75e34a99gy1geohmzhq2gj20ec03wdfp.jpg" alt=""></p><p>可以看到成功返回了结果，并且默认的端口号为8080</p><h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><p>看下application.properties配置文件，SpringBoot还可以使用的另一种配置文件是application.yml，这两种配置文件书写的语法会有不同，以设置端口号为例：</p><p>application.properties的写法：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">server.port=8081</span><br></pre></td></tr></table></figure><p>application.yml的写法：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8081</span></span><br></pre></td></tr></table></figure><p>关于yaml语法的更多细节<a href="https://www.runoob.com/w3cnote/yaml-intro.html" target="_blank" rel="noopener">传送门</a></p><p>当通过运行启动类后，可以发现端口已经被改为了8081：</p><p><img src="//tvax2.sinaimg.cn/large/75e34a99gy1geoh8bixctj20tl09w0td.jpg" alt=""></p><h3 id="测试类"><a href="#测试类" class="headerlink" title="测试类"></a>测试类</h3><p>在test.java.cn.hmc包下新建一个测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith</span>(SpringRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">SpringBootTest</span></span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">HelloApplicationTests</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> MockMvc mvc;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUp</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        mvc = MockMvcBuilders.standaloneSetup(<span class="keyword">new</span> HelloController()).build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextLoads</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        mvc.perform(MockMvcRequestBuilders.get(<span class="string">"/Hello"</span>).accept(</span><br><span class="line">                MediaType.APPLICATION_JSON))</span><br><span class="line">                .andExpect(MockMvcResultMatchers.status().isOk())</span><br><span class="line">                .andDo(MockMvcResultHandlers.print())</span><br><span class="line">                .andReturn();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行测试类成功返回了结果：</p><p><img src="//tvax4.sinaimg.cn/large/75e34a99gy1geoi1uesjfj20zf09bzkp.jpg" alt=""></p><h3 id="POM文件"><a href="#POM文件" class="headerlink" title="POM文件"></a>POM文件</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.14.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.hmc<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springboot<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>springboot<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>Demo project for Spring Boot<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p>其中最上层的<code>&lt;parent&gt;</code>节点约束了下面<code>&lt;dependencies&gt;</code>节点内所有spring-boot依赖的版本，常用的包依赖就可以省去 version 标签。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="后端开发" scheme="https://hmcoding.cn/categories/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="Java" scheme="https://hmcoding.cn/tags/Java/"/>
    
      <category term="Spring Boot" scheme="https://hmcoding.cn/tags/Spring-Boot/"/>
    
  </entry>
  
  <entry>
    <title>Oracle数据库基础命令</title>
    <link href="https://hmcoding.cn/2019/07/12/Oracle%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/"/>
    <id>https://hmcoding.cn/2019/07/12/Oracle%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/</id>
    <published>2019-07-11T16:00:00.000Z</published>
    <updated>2020-05-14T07:36:03.250Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="Oracle数据库基础命令"><a href="#Oracle数据库基础命令" class="headerlink" title="Oracle数据库基础命令"></a>Oracle数据库基础命令</h1><p><strong>此文章主要是记录Orecal数据库的一些基础命令，方便日后使用查阅。😳</strong></p><h1 id="表空间"><a href="#表空间" class="headerlink" title="表空间"></a>表空间</h1><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--创建表空间</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">tablespace</span> helloworld <span class="comment">--指定表空间名</span></span><br><span class="line"><span class="keyword">datafile</span> <span class="string">'c:\helloworld.dbf'</span> <span class="comment">--指定表空间对应的数据文件</span></span><br><span class="line"><span class="keyword">size</span> <span class="number">100</span>m <span class="comment">--表空间的初始大小</span></span><br><span class="line"><span class="keyword">autoextend</span> <span class="keyword">on</span> <span class="comment">--当表空间存储都占满时，自动增长</span></span><br><span class="line"><span class="keyword">next</span> <span class="number">10</span>m; <span class="comment">--每次自动增长的大小</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--删除表空间</span></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">tablespace</span> helloworld;</span><br><span class="line"></span><br><span class="line"><span class="comment">--创建用户</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">user</span> helloworld</span><br><span class="line"><span class="keyword">identified</span> <span class="keyword">by</span> helloworld <span class="comment">--指定密码</span></span><br><span class="line"><span class="keyword">default</span> <span class="keyword">tablespace</span> helloworld; <span class="comment">--指定表空间</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--oracle数据库中常用角色</span></span><br><span class="line">connect <span class="comment">--连接角色，基本角色</span></span><br><span class="line">resource <span class="comment">--开发者角色</span></span><br><span class="line">dba <span class="comment">--超级管理员角色</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--给用户授权</span></span><br><span class="line"><span class="keyword">grant</span> dba <span class="keyword">to</span> helloworld;</span><br><span class="line"></span><br><span class="line"><span class="comment">--解锁用户</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">user</span> scott <span class="keyword">account</span> <span class="keyword">unlock</span>;</span><br><span class="line"><span class="comment">--解锁密码 [此句也可以用来重置密码]</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">user</span> scott <span class="keyword">identified</span> <span class="keyword">by</span> tiger;</span><br></pre></td></tr></table></figure><h1 id="基础操作"><a href="#基础操作" class="headerlink" title="基础操作"></a>基础操作</h1><h2 id="表的创建"><a href="#表的创建" class="headerlink" title="表的创建"></a>表的创建</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--创建一张person表</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> person(</span><br><span class="line">    pid <span class="built_in">number</span>(<span class="number">20</span>),</span><br><span class="line">    pname <span class="built_in">varchar2</span>(<span class="number">10</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h2 id="修改表结构"><a href="#修改表结构" class="headerlink" title="修改表结构"></a>修改表结构</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--添加一列</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> person <span class="keyword">add</span> gender <span class="built_in">number</span>(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">--修改列类型</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> person <span class="keyword">modify</span> gender <span class="built_in">char</span>(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">--修改列名称</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> person <span class="keyword">rename</span> <span class="keyword">column</span> gender <span class="keyword">to</span> sex;</span><br><span class="line"></span><br><span class="line"><span class="comment">--删除一列</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> person <span class="keyword">drop</span> <span class="keyword">column</span> sex;</span><br></pre></td></tr></table></figure><h2 id="数据增删改"><a href="#数据增删改" class="headerlink" title="数据增删改"></a>数据增删改</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--查询表中记录</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> person;</span><br><span class="line"></span><br><span class="line"><span class="comment">--添加一条记录</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> person(pid,pname) <span class="keyword">values</span>(<span class="number">1</span>,<span class="string">'小明'</span>);</span><br><span class="line"><span class="keyword">commit</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">--修改一条记录</span></span><br><span class="line"><span class="keyword">update</span> person <span class="keyword">set</span> pname = <span class="string">'张三'</span> <span class="keyword">where</span> pid = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">commit</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">--三个删除</span></span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> person; <span class="comment">--删除表中全部记录</span></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> person; <span class="comment">--删除表结构</span></span><br><span class="line"><span class="comment">--在数据量大的情况下，尤其在表中带有索引的情况下，该操作效率高</span></span><br><span class="line"><span class="keyword">truncate</span> <span class="keyword">table</span> person; <span class="comment">--先删除表，再次创建表，效果等同于删除表中全部记录</span></span><br></pre></td></tr></table></figure><h2 id="序列的使用"><a href="#序列的使用" class="headerlink" title="序列的使用"></a>序列的使用</h2><p>​    <strong>默认从1开始，依次递增，主要用来给主键赋值使用</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--创建一个序列</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">sequence</span> s_person;</span><br><span class="line"></span><br><span class="line"><span class="comment">--dual:虚表，只是为了补全语法，没有任何意义</span></span><br><span class="line"><span class="keyword">select</span> s_person.currval <span class="keyword">from</span> dual; <span class="comment">--获取序列当前值</span></span><br><span class="line"><span class="keyword">select</span> s_person.nextval <span class="keyword">from</span> dual; <span class="comment">--获取序列下一个值</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--使用序列添加一条记录</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> person(pid,pname) <span class="keyword">values</span>(s_person.nextval,<span class="string">'小明'</span>);</span><br><span class="line"><span class="keyword">commit</span>;</span><br></pre></td></tr></table></figure><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><p><strong>单行函数：作用于一行，返回一个值</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--字符函数</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">upper</span>(<span class="string">'yes'</span>) <span class="keyword">from</span> dual; <span class="comment">--转大写</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">lower</span>(<span class="string">'YES'</span>) <span class="keyword">from</span> dual; <span class="comment">--转小写</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--数值函数</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">round</span>(<span class="number">26.18</span>, <span class="number">1</span>) <span class="keyword">from</span> dual; <span class="comment">--四舍五入,后面参数表示保留的小数位数</span></span><br><span class="line"><span class="keyword">select</span> trunc(<span class="number">26.18</span>, <span class="number">1</span>) <span class="keyword">from</span> dual; <span class="comment">--直接截取，不进行四舍五入</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">mod</span>(<span class="number">10</span>, <span class="number">3</span>) <span class="keyword">from</span> dual; <span class="comment">--求余数（模运算）</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--日期函数</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">sysdate</span>+<span class="number">1</span> <span class="keyword">from</span> dual; <span class="comment">--算出明天此刻</span></span><br><span class="line"><span class="keyword">select</span> months_between(<span class="keyword">sysdate</span>,e.hiredate) <span class="keyword">from</span> emp e; <span class="comment">--距离现在相隔几个月</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--转换函数</span></span><br><span class="line"><span class="keyword">select</span> to_char(<span class="keyword">sysdate</span>,<span class="string">'yyyy-mm-dd hh24:mi:ss'</span>) <span class="keyword">from</span> dual; <span class="comment">--日期转字符串</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">to_date</span>(<span class="string">'2020-3-25 09:20:00'</span>, <span class="string">'yyyy-mm-dd hh24:mi:ss'</span>) <span class="keyword">from</span> dual; <span class="comment">--字符串转日期</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--通用函数</span></span><br><span class="line"><span class="keyword">select</span> e.sal*<span class="number">12</span>+nvl(e.comm,<span class="number">0</span>) <span class="keyword">from</span> emp e; <span class="comment">--空值置为0</span></span><br></pre></td></tr></table></figure><p><strong>多行函数【聚合函数】：作用于多行，返回一个值</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">count</span>(<span class="number">1</span>) <span class="keyword">from</span> emp; <span class="comment">--查询总数量</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">sum</span>(sal) <span class="keyword">from</span> emp; <span class="comment">--工资总和</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">max</span>(sal) <span class="keyword">from</span> emp; <span class="comment">--最大工资</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">min</span>(sal) <span class="keyword">from</span> emp; <span class="comment">--最低工资</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">avg</span>(sal) <span class="keyword">from</span> emp; <span class="comment">--平均工资</span></span><br></pre></td></tr></table></figure><p><strong>条件表达式:</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--给emp表中员工起中文名（等值判断）</span></span><br><span class="line"><span class="keyword">select</span> e.name,</span><br><span class="line"><span class="keyword">case</span> e.name</span><br><span class="line"><span class="keyword">when</span> <span class="string">'SMITH'</span> <span class="keyword">then</span> <span class="string">'刘备'</span></span><br><span class="line"><span class="keyword">when</span> <span class="string">'ALLEN'</span> <span class="keyword">then</span> <span class="string">'关羽'</span></span><br><span class="line"><span class="keyword">when</span> <span class="string">'WARD'</span> <span class="keyword">then</span> <span class="string">'诸葛亮'</span></span><br><span class="line"><span class="keyword">else</span> <span class="string">'无名'</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">from</span> emp e;</span><br><span class="line"></span><br><span class="line"><span class="comment">--判断工资（范围判断）</span></span><br><span class="line"><span class="comment">--条件表达式通用写法，mysql和oracle通用</span></span><br><span class="line"><span class="keyword">select</span> e.sal,</span><br><span class="line"><span class="keyword">case</span></span><br><span class="line"><span class="keyword">when</span> e.sal&gt;<span class="number">3000</span> <span class="keyword">then</span> <span class="string">'高收入'</span></span><br><span class="line"><span class="keyword">when</span> e.sal&gt;<span class="number">1500</span> <span class="keyword">then</span> <span class="string">'中等收入'</span></span><br><span class="line"><span class="keyword">else</span> <span class="string">'低收入'</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">from</span> emp e;</span><br><span class="line"></span><br><span class="line"><span class="comment">--Oracle专用条件表达式</span></span><br><span class="line"><span class="keyword">select</span> e.name,</span><br><span class="line"> <span class="keyword">decode</span>(e.name,</span><br><span class="line"> <span class="string">'SMITH'</span>,  <span class="string">'刘备'</span>,</span><br><span class="line"> <span class="string">'ALLEN'</span>,  <span class="string">'关羽'</span>,</span><br><span class="line"> <span class="string">'WARD'</span>,  <span class="string">'诸葛亮'</span>,</span><br><span class="line"> <span class="string">'无名'</span>)<span class="string">"中文名"</span></span><br><span class="line"><span class="keyword">from</span> emp e;</span><br><span class="line"></span><br><span class="line"><span class="comment">--Oracle中除了起别名，都用单引号</span></span><br></pre></td></tr></table></figure><h2 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h2><p><strong>分组查询：</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--查询出每个部门的平均工资</span></span><br><span class="line"><span class="keyword">select</span> e.deptno, <span class="keyword">avg</span>(e.sal) <span class="keyword">from</span> emp e <span class="keyword">group</span> <span class="keyword">by</span> e.deptno;</span><br><span class="line"></span><br><span class="line"><span class="comment">--查询出平均工资高于2000的部门信息</span></span><br><span class="line"><span class="keyword">select</span> e.deptno, <span class="keyword">avg</span>(e.sal) <span class="keyword">from</span> emp e <span class="keyword">group</span> <span class="keyword">by</span> e.deptno <span class="keyword">having</span> <span class="keyword">avg</span>(e.sal)&gt;<span class="number">2000</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">--查询出每个部门工资高于800的员工的平均工资</span></span><br><span class="line"><span class="keyword">select</span> e.deptno, <span class="keyword">avg</span>(e.sal) <span class="keyword">from</span> emp e <span class="keyword">where</span> e.sal&gt;<span class="number">800</span> <span class="keyword">group</span> <span class="keyword">by</span> e.deptno;</span><br><span class="line"></span><br><span class="line"><span class="comment">--查询出每个部门工资高于800的员工的平均工资,然后再查出平均工资高于2000的部门</span></span><br><span class="line"><span class="keyword">select</span> e.deptno, <span class="keyword">avg</span>(e.sal) <span class="keyword">from</span> emp e <span class="keyword">where</span> e.sal&gt;<span class="number">800</span> <span class="keyword">group</span> <span class="keyword">by</span> e.deptno <span class="keyword">having</span> <span class="keyword">avg</span>(e.sal)&gt;<span class="number">2000</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">--注意：所有条件都不能使用别名来判断(有子查询除外)</span></span><br></pre></td></tr></table></figure><p><strong>多表查询：</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--等值连接</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> emp e, depy d <span class="keyword">where</span> e.deptno = d.deptno;</span><br><span class="line"></span><br><span class="line"><span class="comment">--内连接</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> emp e <span class="keyword">inner</span> <span class="keyword">join</span> dept d <span class="keyword">on</span> e.deptno = d.deptno;</span><br><span class="line"></span><br><span class="line"><span class="comment">--查询出所有部门，以及部门下的员工信息【外连接】</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> emp e <span class="keyword">right</span> <span class="keyword">join</span> dept d <span class="keyword">on</span> e.deptno = d.deptno; <span class="comment">--右外连接</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--查询所有员工信息，以及员工所属部门</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> emp e <span class="keyword">left</span> <span class="keyword">join</span> dept d <span class="keyword">on</span> e.deptno = d.deptno; <span class="comment">--左外连接</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--oracle中专用外连接</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> emp e, dept d <span class="keyword">where</span> e.deptno(+) = d.deptno; <span class="comment">--显示dept表全部数据</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> emp e, dept d <span class="keyword">where</span> e.deptno = d.deptno(+); <span class="comment">--显示emp表全部数据</span></span><br></pre></td></tr></table></figure><p><strong>自连接查询：站在不同的角度把一张表看成多张表</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--查询出员工姓名，员工领导姓名</span></span><br><span class="line"><span class="keyword">select</span> e1.ename, e2.ename <span class="keyword">from</span> emp e1, emp e2 <span class="keyword">where</span> e1.mgr = e2.empno; <span class="comment">--e1表看作员工表，e2表看作领导表</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--查询出员工姓名，员工部门名称，员工领导姓名，员工领导部门名称</span></span><br><span class="line"><span class="keyword">select</span> e1.ename, d1.dname, e2.ename, d2.dname </span><br><span class="line"><span class="keyword">from</span> emp e1, emp e2, dept d1, dept d2 </span><br><span class="line"><span class="keyword">where</span> e1.mgr = e2.empno </span><br><span class="line"><span class="keyword">and</span> e1.deptno = d1.deptno </span><br><span class="line"><span class="keyword">and</span> e2.deptno = d2.deptno;</span><br></pre></td></tr></table></figure><p><strong>子查询：</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--子查询返回一个值</span></span><br><span class="line"><span class="comment">--查询出工资和SCOTT一样的员工信息</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> emp <span class="keyword">where</span> sal <span class="keyword">in</span> (<span class="keyword">select</span> sal <span class="keyword">from</span> emp <span class="keyword">where</span> ename = <span class="string">'SCOTT'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">--子查询返回一个集合</span></span><br><span class="line"><span class="comment">--查询出工资和10号部门任意员工一样的员工信息</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> emp <span class="keyword">where</span> sal <span class="keyword">in</span> (<span class="keyword">select</span> sal <span class="keyword">from</span> emp <span class="keyword">where</span> deptno =<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">--子查询返回一张表</span></span><br><span class="line"><span class="comment">--查询出每个部门最低工资，和最低工资员工姓名，和该员工所在部门名称</span></span><br><span class="line"><span class="keyword">select</span> t.deptno, t.msal, e.ename, d.dname</span><br><span class="line"><span class="keyword">from</span> (<span class="keyword">select</span> deptno, <span class="keyword">min</span>(sal) msal <span class="keyword">from</span> emp <span class="keyword">group</span> <span class="keyword">by</span> deptno) t, emp e, dept d</span><br><span class="line"><span class="keyword">where</span> t.deptno = e.deptno</span><br><span class="line"><span class="keyword">and</span> t.msal = e.sal</span><br><span class="line"><span class="keyword">and</span> e.deptno = d.deptno;</span><br></pre></td></tr></table></figure><p><strong>分页查询：</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--rownum行号：在select操作时，查询出的每行记录都会默认添加一列行号，从1开始，依次递增</span></span><br><span class="line"><span class="comment">--排序操作会影响rownum的顺序</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">rownum</span>, e.* <span class="keyword">from</span> emp e <span class="keyword">order</span> <span class="keyword">by</span> e.sal <span class="keyword">desc</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">--先排序再加行号</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">rownum</span>, t.* <span class="keyword">from</span> (<span class="keyword">select</span> <span class="keyword">rownum</span>, e.* <span class="keyword">from</span> emp e <span class="keyword">order</span> <span class="keyword">by</span> e.sal <span class="keyword">desc</span>) t;</span><br><span class="line"></span><br><span class="line"><span class="comment">--如果涉及到排序，但是还要使用rownum的话，可以再次嵌套查询</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--分页查询正确方法</span></span><br><span class="line"><span class="comment">--emp表工资倒叙排列后，每页五条记录，查询第二页</span></span><br><span class="line"><span class="comment">--rownum行号不能写上大于一个正数</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span>(</span><br><span class="line">    <span class="keyword">select</span> <span class="keyword">rownum</span> rn, tt.* <span class="keyword">from</span> (</span><br><span class="line">        <span class="keyword">select</span> * <span class="keyword">from</span> emp <span class="keyword">order</span> <span class="keyword">by</span> sal <span class="keyword">desc</span></span><br><span class="line">    ) tt <span class="keyword">where</span> <span class="keyword">rownum</span>&lt;<span class="number">11</span></span><br><span class="line">) <span class="keyword">where</span> rn&gt;<span class="number">5</span></span><br></pre></td></tr></table></figure><h1 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h1><p>​    <strong>视图就是提供一个查询的窗口，所有数据来自于原表</strong></p><p>​    <strong>创建视图必须要有dba权限</strong></p><p>创建视图：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">view</span> v_emp <span class="keyword">as</span> <span class="keyword">select</span> ename,job,<span class="keyword">from</span> emp;</span><br></pre></td></tr></table></figure><p>查询视图：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> v_emp;</span><br></pre></td></tr></table></figure><p>修改视图 [<strong>不推荐</strong>]：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">update</span> v_emp <span class="keyword">set</span> job=<span class="string">'CLERK'</span> <span class="keyword">where</span> ename=<span class="string">'ALLEN'</span>;</span><br><span class="line"><span class="keyword">commit</span>;</span><br></pre></td></tr></table></figure><p>创建只读视图：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">view</span> v_emp <span class="keyword">as</span> <span class="keyword">select</span> ename,job,<span class="keyword">from</span> emp <span class="keyword">with</span> <span class="keyword">read</span> <span class="keyword">only</span>;</span><br></pre></td></tr></table></figure><p>视图的作用？</p><ul><li>可以屏蔽掉一些敏感字段</li><li>保证总部和分部数据及时统一</li></ul><h1 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h1><p>​    <strong>索引就是在表的列上构建一个二叉树，达到大幅度提高查询效率的目的，但是索引会影响增删改查的效率</strong></p><p><strong>1.单列索引（构建在单列上）</strong></p><p>创建单列索引：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">index</span> idx_ename <span class="keyword">on</span> emp(ename);</span><br></pre></td></tr></table></figure><p><strong>单列索引触发规则，条件必须是索引列中的原始值：</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> emp <span class="keyword">where</span> ename=<span class="string">'SCOTT'</span>;</span><br></pre></td></tr></table></figure><p><strong>单行函数，模糊查询，都会影响索引的触发</strong></p><p><strong>2.复合索引（构建在多列上）</strong></p><p>创建复合索引：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">index</span> idx_enamejob <span class="keyword">on</span> emp(ename,job);</span><br></pre></td></tr></table></figure><p><strong>复合索引中第一列为优先检索列，如果要触发复合索引，必须包含有优先检索列中的原始值</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> emp <span class="keyword">where</span> ename=<span class="string">'SCOTT'</span> <span class="keyword">and</span> job=<span class="string">'xx'</span>;<span class="comment">--触发复合索引</span></span><br></pre></td></tr></table></figure><p><strong>条件为or时不触发索引：</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> emp <span class="keyword">where</span> ename=<span class="string">'SCOTT'</span> <span class="keyword">or</span> job=<span class="string">'xx'</span>;<span class="comment">--不触发索引</span></span><br></pre></td></tr></table></figure><p><strong>如果某一列既是单列索引又是复合索引，查询条件仅包含这一列时，触发的是单列索引</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> emp <span class="keyword">where</span> ename=<span class="string">'SCOTT'</span>;<span class="comment">--触发单列索引</span></span><br></pre></td></tr></table></figure><h1 id="PL-SQL编程语言"><a href="#PL-SQL编程语言" class="headerlink" title="PL/SQL编程语言"></a>PL/SQL编程语言</h1><h2 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">declare </span><br><span class="line">    说明部分  （变量说明，游标申明，例外说明  〕   </span><br><span class="line"></span><br><span class="line">begin </span><br><span class="line">    语句序列  （DML语句〕…  </span><br><span class="line"></span><br><span class="line">exception </span><br><span class="line">    例外处理语句    </span><br><span class="line"></span><br><span class="line">End;</span><br></pre></td></tr></table></figure><h2 id="声名方法"><a href="#声名方法" class="headerlink" title="声名方法"></a>声名方法</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">declare</span><br><span class="line">i number(2) :&#x3D; 10;-- ：&#x3D;赋值</span><br><span class="line">s varchar(2) :&#x3D; &#39;小明&#39;;</span><br><span class="line">ena emp.ename%type;--引用型变量</span><br><span class="line">emprow emp%rowtype; --记录型变量</span><br><span class="line">begin</span><br><span class="line">dbms_output.put_line(i);</span><br><span class="line">dbms_output.put_line(i);</span><br><span class="line">select ename into ena from emp where empno &#x3D; 7788;--into赋值</span><br><span class="line">dbms_output.put_line(ena);</span><br><span class="line">select * into emprow from emp where empno &#x3D; 7788;</span><br><span class="line">dbms_output.put_line(emprow.ename || &#39;的工作为：&#39; || emprow.job);</span><br><span class="line">end;</span><br></pre></td></tr></table></figure><h2 id="if判断"><a href="#if判断" class="headerlink" title="if判断"></a>if判断</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">declare</span><br><span class="line">i number(3) :&#x3D; &amp;i;</span><br><span class="line">begin</span><br><span class="line">if i&lt;18 then</span><br><span class="line">dbms_output.put_line(&#39;未成年&#39;);</span><br><span class="line">elsif i&lt;40 then</span><br><span class="line">dbms_output.put_line(&#39;中年人&#39;);</span><br><span class="line">else</span><br><span class="line">dbms_output.put_line(&#39;老年人&#39;);</span><br><span class="line">end if;</span><br><span class="line">end;</span><br></pre></td></tr></table></figure><h2 id="循环loop"><a href="#循环loop" class="headerlink" title="循环loop"></a>循环loop</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">--while循环</span><br><span class="line">declare</span><br><span class="line">i number(2) :&#x3D; 1;</span><br><span class="line">begin</span><br><span class="line">while i&lt;11 loop</span><br><span class="line">dbms_output.put_line(i);</span><br><span class="line">i :&#x3D; i+1;</span><br><span class="line">end loop;</span><br><span class="line">end;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">--exit循环(使用较多)</span><br><span class="line">declare</span><br><span class="line">i number(2) :&#x3D; 1;</span><br><span class="line">begin</span><br><span class="line">loop</span><br><span class="line">exit when i&gt;10;</span><br><span class="line">dbms_output.put_line(i);</span><br><span class="line">i :&#x3D; i+1;</span><br><span class="line">end loop;</span><br><span class="line">end;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">--for循环</span><br><span class="line">declare</span><br><span class="line"></span><br><span class="line">begin</span><br><span class="line">for i in 1..10 loop</span><br><span class="line">dbms_output.put_line(i);</span><br><span class="line">end loop;</span><br><span class="line">end;</span><br></pre></td></tr></table></figure><h2 id="游标"><a href="#游标" class="headerlink" title="游标"></a>游标</h2><p>​    <strong>可以存放多个对象，多行记录</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">--输出emp表中所有员工的姓名</span><br><span class="line">declare</span><br><span class="line">cursor c1 is select * from emp;</span><br><span class="line">emprow emp%rowtype;</span><br><span class="line">begin</span><br><span class="line">open c1;</span><br><span class="line">loop</span><br><span class="line">fetch c1 into emprow;</span><br><span class="line">exit when c1%notfound;</span><br><span class="line">dbms_output.put_line(emprow.ename);</span><br><span class="line">end loop;</span><br><span class="line">close c1;</span><br><span class="line">end;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">--给指定部门员工涨工资</span><br><span class="line">declare</span><br><span class="line">cursor c2(eno emp.deptno%type)</span><br><span class="line">is select empo from emp where deptno &#x3D; eno;</span><br><span class="line">en emp.empno%type;</span><br><span class="line">begin</span><br><span class="line">open c2(10);</span><br><span class="line">loop</span><br><span class="line">fetch c2 into en;</span><br><span class="line">exit when c2%notfound;</span><br><span class="line">update emp set sal&#x3D;sal+100 where empno &#x3D; en;</span><br><span class="line">commit;</span><br><span class="line">end loop;</span><br><span class="line">close c2;</span><br><span class="line">end;</span><br></pre></td></tr></table></figure><h2 id="存储过程"><a href="#存储过程" class="headerlink" title="存储过程"></a>存储过程</h2><p>​    <strong>存储过程就是提前已经编译好的一段pl/sql语言，放置在数据库端可以直接被调用，这一段pl/sql一般都是固定步骤的业务</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">--给指定员工涨100块钱</span><br><span class="line">create or replace procedure p1(eno emp.empno%type)</span><br><span class="line">is</span><br><span class="line"></span><br><span class="line">begin</span><br><span class="line">update emp set sal&#x3D;sal+100 where empno &#x3D; eno;</span><br><span class="line">commit;</span><br><span class="line">end;</span><br><span class="line"></span><br><span class="line">--测试p1</span><br><span class="line">declare</span><br><span class="line"></span><br><span class="line">begin</span><br><span class="line">p1(7788);</span><br><span class="line">end;</span><br></pre></td></tr></table></figure><h2 id="存储函数"><a href="#存储函数" class="headerlink" title="存储函数"></a>存储函数</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">--通过存储函数实现计算指定员工的年薪</span><br><span class="line">create or replace function f_yearsal(eno emp.empno%type) return number</span><br><span class="line">is</span><br><span class="line">s number(10);</span><br><span class="line">begin</span><br><span class="line">select sal*12 + nvl(comm,0) into s from emp where empno &#x3D; eno;</span><br><span class="line">return s;</span><br><span class="line">end;</span><br><span class="line"></span><br><span class="line">--测试f_yearsal</span><br><span class="line">--存储函数在调用的时候，返回值必须要接收</span><br><span class="line">declare</span><br><span class="line">s number(10);</span><br><span class="line">begin</span><br><span class="line">s :&#x3D; f_yearsal(7788);</span><br><span class="line">dbms_output.put_line(s);</span><br><span class="line">end;</span><br></pre></td></tr></table></figure><p><strong>注意：</strong></p><ul><li><strong>存储过程和存储函数的参数都不能带长度</strong></li><li><strong>存储函数的返回值类型不能带长度</strong></li></ul><h2 id="out类型参数的使用"><a href="#out类型参数的使用" class="headerlink" title="out类型参数的使用"></a>out类型参数的使用</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">--使用存储过程来算年薪</span><br><span class="line">create or replace procedure p_yearsal(eno emp.empno%type, yearsal out number)</span><br><span class="line">is</span><br><span class="line">s number(10);</span><br><span class="line">c emp.comm%type;</span><br><span class="line">begin</span><br><span class="line">select sal*12, nvl(comm,0) into s, c from emp where empno &#x3D; eno;</span><br><span class="line">yearsal :&#x3D; s+c;</span><br><span class="line">end;</span><br><span class="line"></span><br><span class="line">--测试p_yearsal</span><br><span class="line">declare</span><br><span class="line">yearsal number(10);</span><br><span class="line">begin</span><br><span class="line">p_yearsal(7788, yearsal);</span><br><span class="line">dbms_output.put_line(yearsal);</span><br><span class="line">end;</span><br></pre></td></tr></table></figure><p><strong>in和out类型参数的区别是什么？</strong></p><ul><li>凡是涉及到into查询语句赋值或者 := 赋值操作的参数，都必须使用out来修饰</li></ul><h2 id="存储过程和存储函数的区别？"><a href="#存储过程和存储函数的区别？" class="headerlink" title="存储过程和存储函数的区别？"></a>存储过程和存储函数的区别？</h2><ul><li><strong>存储函数</strong>比<strong>存储过程</strong>多了两个return</li><li>本质区别：<strong>存储函数</strong>有返回值，<strong>存储过程</strong>没有返回值</li><li><strong>存储过程</strong>要想实现有返回值的业务，必须使用out类型的参数</li><li>可以使用<strong>存储函数</strong>有返回值的特性，自定义函数；<strong>存储过程</strong>不能用来自定义函数</li></ul><p>案例需求：查询出员工姓名，员工所在部门名称</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">--使用存储函数来实现提供一个部门编号，输出一个部门名称</span><br><span class="line">create or replace function fdna(dno dept.deptno%type) return dept.dname%type</span><br><span class="line">is</span><br><span class="line">dna dept.dname%type;</span><br><span class="line">begin</span><br><span class="line">select dname into dna from dept where deptno &#x3D; dno;</span><br><span class="line">return dna;</span><br><span class="line">end;</span><br><span class="line"></span><br><span class="line">--使用fdna存储函数来实现案例需求：查询出员工姓名，员工所在部门名称</span><br><span class="line">select e.name, fdna(e.deptno) from emp e;</span><br></pre></td></tr></table></figure><h2 id="触发器"><a href="#触发器" class="headerlink" title="触发器"></a>触发器</h2><p>​    制定一个规则，在我们做<strong>增删改</strong>操作的时候，只要满足该规则，自动触发，无需调用</p><p><strong>触发器中触发语句与伪记录变量的值：</strong></p><table><thead><tr><th>触发语句</th><th>：old</th><th>：new</th></tr></thead><tbody><tr><td>Insert</td><td>所有字段都是空（null）</td><td>将要插入的数据</td></tr><tr><td>Update</td><td>更新以前该行的值</td><td>更新后的值</td></tr><tr><td>Delete</td><td>删除以前该行的值</td><td>所有字段都是空（null）</td></tr></tbody></table><p><strong>语句级触发器：</strong>不包含有for each row的就是语句级触发器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">--语句级触发器</span><br><span class="line">--插入一条记录，输出一个新员工入职</span><br><span class="line">create or replace trigger t1</span><br><span class="line">after</span><br><span class="line">insert</span><br><span class="line">on person</span><br><span class="line">declare</span><br><span class="line"></span><br><span class="line">begin</span><br><span class="line">dbms_output.put_line(&#39;一个新员工入职&#39;);</span><br><span class="line">end;</span><br><span class="line"></span><br><span class="line">--触发t1</span><br><span class="line">insert into person values(1,&#39;张三&#39;);</span><br><span class="line">commit;</span><br></pre></td></tr></table></figure><p><strong>行级触发器：</strong>包含有for each row的就是行级触发器（加for each row）是为了使用:old或者:new对象或者一行记录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">--行级触发器</span><br><span class="line">--不能给员工降薪</span><br><span class="line">--raise_application_error(-20001~20009之间不能重复,&#39;错误提示信息&#39;);</span><br><span class="line">create or replace trigger t2</span><br><span class="line">before</span><br><span class="line">update</span><br><span class="line">on emp</span><br><span class="line">for each row</span><br><span class="line">declare</span><br><span class="line"></span><br><span class="line">begin</span><br><span class="line">if :old.sal&gt;:new.sal then</span><br><span class="line">raise_application_error(-20001,&#39;不能给员工降薪&#39;);</span><br><span class="line">end if;</span><br><span class="line">end;</span><br><span class="line"></span><br><span class="line">--触发t2</span><br><span class="line">update emp set sal&#x3D;sal-1 where empno &#x3D; 7788;</span><br><span class="line">commit;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">--触发器实现主键自增（行级触发器）</span><br><span class="line">--分析：在用户做插入操作之前，拿到即将插入的数据，给该数据中的主键列赋值</span><br><span class="line">create or replace trigger auid</span><br><span class="line">before</span><br><span class="line">insert</span><br><span class="line">on person</span><br><span class="line">for each row</span><br><span class="line">declare</span><br><span class="line"></span><br><span class="line">begin</span><br><span class="line">select s_person.nextval into :new.pid from dual;</span><br><span class="line">end;</span><br><span class="line"></span><br><span class="line">--使用auid实现主键自增</span><br><span class="line">insert into person(pname) values(&#39;张三&#39;);</span><br><span class="line">commit;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="SQL" scheme="https://hmcoding.cn/categories/SQL/"/>
    
    
      <category term="Oracle" scheme="https://hmcoding.cn/tags/Oracle/"/>
    
      <category term="SQL" scheme="https://hmcoding.cn/tags/SQL/"/>
    
  </entry>
  
  <entry>
    <title>SpringMVC实现文件上传与下载</title>
    <link href="https://hmcoding.cn/2019/06/17/SpringMVC%E5%AE%9E%E7%8E%B0%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E5%92%8C%E4%B8%8B%E8%BD%BD/"/>
    <id>https://hmcoding.cn/2019/06/17/SpringMVC%E5%AE%9E%E7%8E%B0%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E5%92%8C%E4%B8%8B%E8%BD%BD/</id>
    <published>2019-06-16T16:00:00.000Z</published>
    <updated>2020-05-14T01:48:44.330Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="SpringMVC实现文件上传与下载"><a href="#SpringMVC实现文件上传与下载" class="headerlink" title="SpringMVC实现文件上传与下载"></a>SpringMVC实现文件上传与下载</h1><p>SpringMVC实现了对文件上传的支持，提供了multipart解析器。MultipartFile提供了一些对文件操作的方法，使得文件上传变得更简单。下面以案例形式了解一下如何使用SpringMVC实现文件的上传操作。</p><h2 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h2><p><strong>配置</strong></p><p>除了之前使用的Spring以及SpringMVC的相关jar依赖包，还需要导入以下jar文件：</p><ul><li>commons-fileupload.jar</li><li>Commons-io.jar</li></ul><p>1、新增一个fileupload.jsp页面</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</span><br><span class="line">&lt;%</span><br><span class="line">    pageContext.setAttribute(<span class="string">"APP_PATH"</span>, request.getContextPath());</span><br><span class="line">%&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;文件上传&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;form action=<span class="string">"$&#123;APP_PATH&#125;/fileupload"</span> method=<span class="string">"post"</span> enctype=<span class="string">"multipart/form-data"</span>&gt;</span><br><span class="line">    &lt;input type=<span class="string">"file"</span> name=<span class="string">"upload"</span>/&gt;&lt;br/&gt;</span><br><span class="line">    &lt;input type=<span class="string">"submit"</span> value=<span class="string">"上传"</span>&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p><strong>这里需要注意2点：</strong></p><ul><li>form表单的enctype取值必须是：multipart/form-data (默认值是application/x-www-form-urlencoded)</li><li>method属性取值必须是Post</li></ul><p>2、Controller层映射方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/fileupload"</span>,method = RequestMethod.POST)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">fileupload</span><span class="params">(MultipartFile upload, HttpServletRequest request, Model model)</span></span>&#123; <span class="comment">//参数upload必须与表单中type="file"的name属性的值相同</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取文件在服务器上的储存位置</span></span><br><span class="line">    String path = request.getServletContext().getRealPath(<span class="string">"/upload"</span>);</span><br><span class="line">    File filePath = <span class="keyword">new</span> File(path);</span><br><span class="line">    System.out.println(<span class="string">"文件保存路径："</span> + path);</span><br><span class="line">    <span class="keyword">if</span> (!filePath.exists() &amp;&amp; !filePath.isDirectory()) &#123;</span><br><span class="line">        System.out.println(<span class="string">"目录不存在，创建目录："</span> + filePath);</span><br><span class="line">        filePath.mkdir();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取原始文件名称</span></span><br><span class="line">    String originalFileName = upload.getOriginalFilename();</span><br><span class="line">    System.out.println(<span class="string">"原始文件名称："</span> + originalFileName);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取文件类型，以最后一个`.`作为标识</span></span><br><span class="line">    String type = originalFileName.substring(originalFileName.lastIndexOf(<span class="string">"."</span>) + <span class="number">1</span>);</span><br><span class="line">    System.out.println(<span class="string">"文件类型："</span> + type);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置文件新名字</span></span><br><span class="line">    String fileName = UUID.randomUUID().toString().replace(<span class="string">"-"</span>,<span class="string">""</span>) + <span class="string">"."</span> + type;</span><br><span class="line">    System.out.println(<span class="string">"文件新名称："</span> + fileName);</span><br><span class="line">    <span class="comment">//在指定路径创建一个文件</span></span><br><span class="line">    File targetFile = <span class="keyword">new</span> File(path, fileName);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将文件保存到服务器指定位置</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        upload.transferTo(targetFile);</span><br><span class="line">        model.addAttribute(<span class="string">"message"</span>, <span class="string">"保存数据成功"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"page/success"</span>;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        System.out.println(<span class="string">"保存文件错误..."</span>);</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"page/error"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3、在Spring配置文件中注册这个multipart解析器</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"multipartResolver"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">class</span>=<span class="string">"org.springframework.web.multipart.commons.CommonsMultipartResolver"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--设置上传文件的大小 1024*200即200k--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxUploadSize"</span> <span class="attr">value</span>=<span class="string">"204800"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这时候发现配置的id必须保证是multipartResolver，如果改为其他，如：myMultipartResolver，就不能正常上传文件且报MulltipartFile file出现空指针异常。</p><p>那么是为什么呢？</p><p>原因是在Spring MVC的核心类DispatcherServlet中, 把这些bean的id固定了. 你必须保证bean的id相同, 才能正常工作. 对应的代码如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DispatcherServlet</span> <span class="keyword">extends</span> <span class="title">FrameworkServlet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String MULTIPART_RESOLVER_BEAN_NAME = <span class="string">"multipartResolver"</span>;</span><br></pre></td></tr></table></figure><p>从上面的代码可以看出DispatcherServlet把一些bean的id给固定了，里面就包含了”multipartResolver”，所以我们在配置时一定要注意了，必须保证MultipartResolver的id是multipartResolver。</p><h2 id="文件下载"><a href="#文件下载" class="headerlink" title="文件下载"></a>文件下载</h2><p>1、新建一个download.jsp</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</span><br><span class="line">&lt;%</span><br><span class="line">    pageContext.setAttribute(<span class="string">"APP_PATH"</span>, request.getContextPath());</span><br><span class="line">%&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;文件下载&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h2&gt;图片下载&lt;/h2&gt;</span><br><span class="line">&lt;br&gt;</span><br><span class="line">&lt;a href="$&#123;APP_PATH&#125;/download?fileName=c2f9d48f26cb4742856e967285df56dc.jpg"&gt;点击下载图片&lt;/a&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>在请求路径中拼接了<code>fileName</code>参数值是c2f9d48f26cb4742856e967285df56dc.jpg，那么后台接收到这个参数值，就会查询指定位置的文件。</p><p>2、Controller层映射方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/download"</span>)</span><br><span class="line"><span class="keyword">public</span> ResponseEntity&lt;<span class="keyword">byte</span>[]&gt; downloads(<span class="meta">@RequestParam</span>(<span class="string">"fileName"</span>) String fileName, HttpServletRequest request, HttpServletResponse response)&#123;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        <span class="comment">//要下载的图片地址</span></span><br><span class="line">        String path = request.getServletContext().getRealPath(<span class="string">"/upload"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1、设置response 响应头</span></span><br><span class="line">        response.reset();<span class="comment">//设置页面不缓存，清空buffer</span></span><br><span class="line">        response.setCharacterEncoding(<span class="string">"UTF-8"</span>);<span class="comment">//字符编码</span></span><br><span class="line">        response.setContentType(<span class="string">"multipart/form-data"</span>);<span class="comment">//二进制传输数据</span></span><br><span class="line">        <span class="comment">//设置响应头</span></span><br><span class="line">        response.setHeader(<span class="string">"Content-Disposition"</span>,<span class="string">"attachment;fileName="</span> + URLEncoder.encode(fileName,<span class="string">"UTF-8"</span>));</span><br><span class="line"></span><br><span class="line">        File file = <span class="keyword">new</span> File(path, fileName);</span><br><span class="line">        <span class="comment">//读取文件--输入流</span></span><br><span class="line">        FileInputStream input = <span class="keyword">new</span> FileInputStream(file);</span><br><span class="line">        <span class="comment">//写出文件--输出流</span></span><br><span class="line">        ServletOutputStream out = response.getOutputStream();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">byte</span>[] buff = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//执行写出操作</span></span><br><span class="line">        <span class="keyword">while</span>((index = input.read(buff))!=-<span class="number">1</span>)&#123;</span><br><span class="line">            out.write(buff,<span class="number">0</span>,index);</span><br><span class="line">            out.flush();</span><br><span class="line">        &#125;</span><br><span class="line">        out.close();</span><br><span class="line">        input.close();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">        System.out.println(<span class="string">"文件下载出错了......"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//方式二</span></span><br><span class="line"><span class="comment">/*        try &#123;</span></span><br><span class="line"><span class="comment">            //下载路径</span></span><br><span class="line"><span class="comment">            String path = request.getServletContext().getRealPath("/upload");</span></span><br><span class="line"><span class="comment">            File file = new File(path + File.separator + fileName);</span></span><br><span class="line"><span class="comment">            HttpHeaders headers = new HttpHeaders();</span></span><br><span class="line"><span class="comment">            //解决文件名中文乱码问题</span></span><br><span class="line"><span class="comment">            String downloadFileName = new String(fileName.getBytes("UTF-8"), "iso-8859-1");</span></span><br><span class="line"><span class="comment">            //告诉浏览器以"attachment"方式打开文件</span></span><br><span class="line"><span class="comment">            headers.setContentDispositionFormData("attachment", downloadFileName);</span></span><br><span class="line"><span class="comment">            //设置请求头的媒体格式类型为 application/octet-stream(二进制流数据)</span></span><br><span class="line"><span class="comment">            headers.setContentType(MediaType.APPLICATION_OCTET_STREAM);</span></span><br><span class="line"><span class="comment">            return new ResponseEntity&lt;byte[]&gt;(FileUtils.readFileToByteArray(file), headers, HttpStatus.CREATED);</span></span><br><span class="line"><span class="comment">        &#125; catch (Exception e) &#123;</span></span><br><span class="line"><span class="comment">            e.printStackTrace();</span></span><br><span class="line"><span class="comment">            System.out.println("文件下载出错...");</span></span><br><span class="line"><span class="comment">            return null;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实际运行效果如下：</p><p><img src="//tvax4.sinaimg.cn/large/75e34a99gy1geo9kpikn7j20xv0klq3t.jpg" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="后端开发" scheme="https://hmcoding.cn/categories/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="Java" scheme="https://hmcoding.cn/tags/Java/"/>
    
      <category term="SpringMVC" scheme="https://hmcoding.cn/tags/SpringMVC/"/>
    
  </entry>
  
  <entry>
    <title>SSM框架整合入门</title>
    <link href="https://hmcoding.cn/2019/05/10/SSM%E6%A1%86%E6%9E%B6%E6%95%B4%E5%90%88%E5%85%A5%E9%97%A8/"/>
    <id>https://hmcoding.cn/2019/05/10/SSM%E6%A1%86%E6%9E%B6%E6%95%B4%E5%90%88%E5%85%A5%E9%97%A8/</id>
    <published>2019-05-09T16:00:00.000Z</published>
    <updated>2020-05-14T07:28:57.712Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="SSM框架整合入门"><a href="#SSM框架整合入门" class="headerlink" title="SSM框架整合入门"></a>SSM框架整合入门</h1><h2 id="关于项目"><a href="#关于项目" class="headerlink" title="关于项目"></a>关于项目</h2><h3 id="环境："><a href="#环境：" class="headerlink" title="环境："></a>环境：</h3><ul><li>后端：Spring + MyBatis + SpringMVC</li><li>前端：Bootstrap + JQuery</li><li>测试环境：IDEA + Tomcat8 + MySql5.7 + JDK8 + Maven</li></ul><h3 id="项目功能："><a href="#项目功能：" class="headerlink" title="项目功能："></a>项目功能：</h3><ul><li>实现用户登录功能</li><li>实现客户信息的增删改查功能</li></ul><h3 id="项目结构："><a href="#项目结构：" class="headerlink" title="项目结构："></a>项目结构：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── README.md </span><br><span class="line">├── pom.xml</span><br><span class="line">└── src</span><br><span class="line">    └── main</span><br><span class="line">        ├── java</span><br><span class="line">        │   └── pers</span><br><span class="line">        │       └── hmc</span><br><span class="line">        │           ├── controller  -- SpringMVC-WEB层控制器</span><br><span class="line">        │           ├── dao  -- Mybatis接口</span><br><span class="line">        │           ├── bean  -- JavaBean实体类</span><br><span class="line">        │           ├── serviceImpl  -- service业务层实现</span><br><span class="line">        │           └── service  -- service业务层</span><br><span class="line">        ├── resources  -- maven项目存放配置文件的根目录(classpath:)</span><br><span class="line">        │   ├── mapper  -- Mybatis映射文件</span><br><span class="line">        │   ├── applicationContext.xml  -- Spring配置文件</span><br><span class="line">        │   ├── dbconfig.properties--数据库连接参数</span><br><span class="line">        │   ├── logback.xml--日志xml配置</span><br><span class="line">        │   ├── mabatis-config.xml--Mybatis配置文件</span><br><span class="line">        │   └── sql_customer.sql  -- 数据库建表语句</span><br><span class="line">        └── webapp  -- 项目的根目录</span><br><span class="line">            ├── static  -- 静态资源文件</span><br><span class="line">            └── WEB-INF  -- web.xml配置文件和页面JSP文件</span><br></pre></td></tr></table></figure><h3 id="整合思路："><a href="#整合思路：" class="headerlink" title="整合思路："></a>整合思路：</h3><p>首先须知Mybatis框架是一个持久层框架，而Spring MVC是WEB层框架，Spring框架则充当着业务层的角色。那么将三者联系起来正好组成了<code>web--service--dao</code>的三层架构体系。那么整合思路就如下所示了：</p><p>1、整合dao(即mapper)，实现Mybatis和Spring的整合</p><p>2、整合service，由Spring管理service接口，在service中可以调用dao（mapper）</p><p>3、整合web（controller），实现Spring MVC和Spring的整合，在controller中调用service</p><h2 id="需求实现"><a href="#需求实现" class="headerlink" title="需求实现"></a>需求实现</h2><h3 id="实现用户登录功能"><a href="#实现用户登录功能" class="headerlink" title="实现用户登录功能"></a>实现用户登录功能</h3><p><strong>创建表结构</strong></p><p>SQL语句请查看项目中resources目录下的sql_customer.sql文件</p><p>除了创建表，我们同样要创建bean对象（查看bean包下的User），并提供属性setter和getter方法。（注意尽量保持bean属性参数和表字段名称对应相等）</p><p><strong>编写Controller层</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/login"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">login</span><span class="params">(@RequestParam String username, @RequestParam String password, Model model)</span> </span>&#123;</span><br><span class="line">    User user = userService.login(username);</span><br><span class="line">    <span class="keyword">if</span>(user != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span>(user.getPassword().equals(password)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"page/page"</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            model.addAttribute(<span class="string">"message"</span>, <span class="string">"登录失败！"</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"page/loginInfo"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        model.addAttribute(<span class="string">"message"</span>, <span class="string">"你输入的用户名或密码有误!"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"page/loginInfo"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用户登录时，先获取到用户登录时填写的用户名username和密码password，然后根据用户名查询并返回，根据此用户名查询到的密码与登录的密码进行<code>equals</code>，如果相等就登录成功。如果登录成功，将返回到<code>page/page.jsp</code>，如果登录失败将返回到<code>page/loginInfo.jsp</code>页面。（这是根据dispatcherServlet-servlet.xml下配置的视图解析器<code>InternalResourceViewResolver</code>决定的）</p><p><strong>编写Mapper.xml</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"login"</span> <span class="attr">parameterType</span>=<span class="string">"String"</span> <span class="attr">resultType</span>=<span class="string">"User"</span>&gt;</span></span><br><span class="line">    select * from tb_user where username = #&#123;username&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>我们使用了Mybatis的接口代理开发模式，直接在Mapper.xml中编写原生sql语句，即可进行与数据库间的交互。其中：</p><ul><li><code>id</code>指明是哪个方法调用这个sql；</li><li><code>parameterType</code>指定了接口传递的参数类型(我们根据用户名查询所以是String类型)；</li><li><code>resultType</code>指定该查询语句返回值的数据类型（因为我们已经在配置文件启用了别名配置<code>typeAliases</code>，所以这里直接指定bean对象类名即可；若没有启动别名配置，就必须写类的全限定名）。使用<code>#{}</code>会将传递的参数值自动添加<code>&quot;&quot;</code>；注意<code>#{}</code>和<code>${}</code>区分，后者则是直接拼接传递进来的字符串，而不会添加任何符号，且前者能避免sql注入。</li></ul><h3 id="查询（分页）"><a href="#查询（分页）" class="headerlink" title="查询（分页）"></a>查询（分页）</h3><p>这里分页使用Mybatis的分页查询插件：PageHelper。</p><p><strong>引入Maven依赖：</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.pagehelper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>pagehelper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在mabatis-config.xml配置文件中配置分页插件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 分页插件配置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugin</span> <span class="attr">interceptor</span>=<span class="string">"com.github.pagehelper.PageHelper"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 分页参数合理化 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"reasonable"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="加载客户列表信息"><a href="#加载客户列表信息" class="headerlink" title="加载客户列表信息"></a>加载客户列表信息</h4><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/********************加载客户列表信息********************/</span></span><br><span class="line"><span class="comment">//入口函数</span></span><br><span class="line">$(function() &#123;</span><br><span class="line">    <span class="comment">//加载客户列表信息并显示第一页</span></span><br><span class="line">    to_page(<span class="number">1</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="function">function <span class="title">to_page</span><span class="params">(pn)</span></span>&#123;</span><br><span class="line">    $.ajax(&#123;</span><br><span class="line">        url : <span class="string">"$&#123;APP_PATH&#125;/cust"</span>,</span><br><span class="line">        data : <span class="string">"pn="</span> + pn,</span><br><span class="line">        type : <span class="string">"GET"</span>,</span><br><span class="line">        success : function(result) &#123;</span><br><span class="line">            <span class="comment">//解析并显示客户数据</span></span><br><span class="line">            cust_table(result);</span><br><span class="line">            flag = <span class="keyword">true</span>;</span><br><span class="line">            <span class="comment">//解析并显示分页信息</span></span><br><span class="line">            build_page_info(result);</span><br><span class="line">            <span class="comment">//解析并显示分页条</span></span><br><span class="line">            build_page_nav(result);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>加载客户列表信息时调用to_page(1)并传入页码，通过ajax请求controller层的映射方法，拿到返回的JSON数据，解析并显示到页面中。</p><p><strong>编写Controller层</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//查询所有客户并实现分页</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/cust"</span>)</span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Message <span class="title">selectAllCustomerJson</span><span class="params">(@RequestParam(value = <span class="string">"pn"</span>, defaultValue = <span class="string">"1"</span>)</span>Integer pn) </span>&#123;</span><br><span class="line">    <span class="comment">//startPage传入页码、每页的数据条数</span></span><br><span class="line">    PageHelper.startPage(pn, <span class="number">5</span>);</span><br><span class="line">    List&lt;Customer&gt; cust = customerservice.selectAllCustomer();</span><br><span class="line">    <span class="comment">//通过PageInfo包装查询结果，传入查询的结果、分页条连续显示的的页数</span></span><br><span class="line">    PageInfo page = <span class="keyword">new</span> PageInfo(cust,<span class="number">5</span>);</span><br><span class="line">    <span class="comment">//JSON格式返回查询结果</span></span><br><span class="line">    <span class="keyword">return</span> Message.success().add(<span class="string">"Info"</span>, page);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>经过分页插件处理包装后返回的JSON数据如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"status"</span>: <span class="number">200</span>,</span><br><span class="line">    <span class="attr">"message"</span>: <span class="string">"SUCCESS!"</span>,</span><br><span class="line">    <span class="attr">"extend"</span>: &#123;</span><br><span class="line">        <span class="attr">"Info"</span>: &#123;</span><br><span class="line">            <span class="attr">"pageNum"</span>: <span class="number">1</span>,<span class="comment">//当前页</span></span><br><span class="line">            <span class="attr">"pageSize"</span>: <span class="number">5</span>,<span class="comment">//每页的数量</span></span><br><span class="line">            <span class="attr">"size"</span>: <span class="number">5</span>,<span class="comment">//当前页的数量</span></span><br><span class="line">            <span class="attr">"startRow"</span>: <span class="number">1</span>,<span class="comment">//当前页面第一个元素在数据库中的行号</span></span><br><span class="line">            <span class="attr">"endRow"</span>: <span class="number">5</span>,<span class="comment">//当前页面最后一个元素在数据库中的行号</span></span><br><span class="line">            <span class="attr">"total"</span>: <span class="number">7</span>,<span class="comment">//总记录数</span></span><br><span class="line">            <span class="attr">"pages"</span>: <span class="number">2</span>,<span class="comment">//总页数</span></span><br><span class="line">            <span class="attr">"list"</span>: [<span class="comment">//结果集</span></span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="attr">"id"</span>: <span class="number">1</span>,</span><br><span class="line">                    <span class="attr">"name"</span>: <span class="string">"小张"</span>,</span><br><span class="line">                    <span class="attr">"telephone"</span>: <span class="string">"135xxxx8891"</span>,</span><br><span class="line">                    <span class="attr">"address"</span>: <span class="string">"北京"</span>,</span><br><span class="line">                    <span class="attr">"remark"</span>: <span class="string">"备注"</span></span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="attr">"id"</span>: <span class="number">2</span>,</span><br><span class="line">                    <span class="attr">"name"</span>: <span class="string">"小李"</span>,</span><br><span class="line">                    <span class="attr">"telephone"</span>: <span class="string">"135xxxx8892"</span>,</span><br><span class="line">                    <span class="attr">"address"</span>: <span class="string">"天津"</span>,</span><br><span class="line">                    <span class="attr">"remark"</span>: <span class="string">"备注"</span></span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="attr">"id"</span>: <span class="number">3</span>,</span><br><span class="line">                    <span class="attr">"name"</span>: <span class="string">"小王"</span>,</span><br><span class="line">                    <span class="attr">"telephone"</span>: <span class="string">"135xxxx8893"</span>,</span><br><span class="line">                    <span class="attr">"address"</span>: <span class="string">"重庆"</span>,</span><br><span class="line">                    <span class="attr">"remark"</span>: <span class="string">"备注"</span></span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="attr">"id"</span>: <span class="number">4</span>,</span><br><span class="line">                    <span class="attr">"name"</span>: <span class="string">"小赵"</span>,</span><br><span class="line">                    <span class="attr">"telephone"</span>: <span class="string">"135xxxx8894"</span>,</span><br><span class="line">                    <span class="attr">"address"</span>: <span class="string">"武汉"</span>,</span><br><span class="line">                    <span class="attr">"remark"</span>: <span class="string">"备注"</span></span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="attr">"id"</span>: <span class="number">5</span>,</span><br><span class="line">                    <span class="attr">"name"</span>: <span class="string">"小刘"</span>,</span><br><span class="line">                    <span class="attr">"telephone"</span>: <span class="string">"135xxxx8895"</span>,</span><br><span class="line">                    <span class="attr">"address"</span>: <span class="string">"青岛"</span>,</span><br><span class="line">                    <span class="attr">"remark"</span>: <span class="string">"备注"</span></span><br><span class="line">                &#125;</span><br><span class="line">            ],</span><br><span class="line">            <span class="attr">"firstPage"</span>: <span class="number">1</span>,<span class="comment">//第一页</span></span><br><span class="line">            <span class="attr">"prePage"</span>: <span class="number">0</span>,<span class="comment">//前一页</span></span><br><span class="line">            <span class="attr">"nextPage"</span>: <span class="number">2</span>,<span class="comment">//下一页</span></span><br><span class="line">            <span class="attr">"lastPage"</span>: <span class="number">2</span>,<span class="comment">//最后一页</span></span><br><span class="line">            <span class="attr">"isFirstPage"</span>: <span class="literal">true</span>,<span class="comment">//是否为第一页</span></span><br><span class="line">            <span class="attr">"isLastPage"</span>: <span class="literal">false</span>,<span class="comment">//是否为最后一页</span></span><br><span class="line">            <span class="attr">"hasPreviousPage"</span>: <span class="literal">false</span>,<span class="comment">//是否有前一页</span></span><br><span class="line">            <span class="attr">"hasNextPage"</span>: <span class="literal">true</span>,<span class="comment">//是否有下一页</span></span><br><span class="line">            <span class="attr">"navigatePages"</span>: <span class="number">5</span>,<span class="comment">//导航页码数</span></span><br><span class="line">            <span class="attr">"navigatepageNums"</span>: [<span class="comment">//所有导航页号</span></span><br><span class="line">                <span class="number">1</span>,</span><br><span class="line">                <span class="number">2</span></span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>关于pageInfo的更多信息可以查看官方文档 <a href="https://pagehelper.github.io/docs/howtouse/" target="_blank" rel="noopener">点击进入</a></p><p><strong>编写Mapper.xml</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 查询所有客户 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectAllCustomer"</span> <span class="attr">resultMap</span>=<span class="string">"BaseResultMap"</span>&gt;</span></span><br><span class="line">    select * from tb_customer</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>因为使用了分页插件实现了数据的分页封装，这里SQL语句就不需要再使用limit来进行分页处理。</p><h4 id="导航栏快速查询功能"><a href="#导航栏快速查询功能" class="headerlink" title="导航栏快速查询功能"></a>导航栏快速查询功能</h4><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/********************导航栏 快速查询按钮 功能实现********************/</span></span><br><span class="line">$(<span class="string">"#quickQuery-btn"</span>).click(function()&#123;</span><br><span class="line">    Quick_input = $(<span class="string">"#quickQuery-input"</span>).val();</span><br><span class="line">    quickQuery(<span class="number">1</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//实现根据客户名的快速查询</span></span><br><span class="line"><span class="function">function <span class="title">quickQuery</span><span class="params">(pn)</span></span>&#123;</span><br><span class="line">    $.ajax(&#123;</span><br><span class="line">        url:<span class="string">"$&#123;APP_PATH&#125;/quickQuery"</span>,</span><br><span class="line">        type:<span class="string">"GET"</span>,</span><br><span class="line">        data:<span class="string">"pn="</span>+pn+<span class="string">"&amp;"</span>+$(<span class="string">"#bs-example-navbar-collapse-1 form"</span>).serialize(),</span><br><span class="line">        dataType: <span class="string">'json'</span>,</span><br><span class="line">        success:function(result)&#123;</span><br><span class="line">            <span class="comment">//解析并显示快速查询客户数据</span></span><br><span class="line">            cust_table(result);</span><br><span class="line">            flag = <span class="keyword">false</span>;</span><br><span class="line">            <span class="comment">//解析并显示快速查询分页信息</span></span><br><span class="line">            build_page_info(result);</span><br><span class="line">            <span class="comment">//解析并显示快速查询分页条</span></span><br><span class="line">            quickQuery_page_nav(result);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>编写Controller层</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//快速查询客户并实现分页</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/quickQuery"</span>)</span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Message <span class="title">quickQuery</span><span class="params">(@RequestParam(value = <span class="string">"pn"</span>, defaultValue = <span class="string">"1"</span>)</span>Integer pn,Customer customer) </span>&#123;</span><br><span class="line"></span><br><span class="line">    PageHelper.startPage(pn, <span class="number">5</span>);</span><br><span class="line"></span><br><span class="line">    List&lt;Customer&gt; cust = customerservice.quickQuery(customer);</span><br><span class="line"></span><br><span class="line">    PageInfo page = <span class="keyword">new</span> PageInfo(cust, <span class="number">5</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> Message.success().add(<span class="string">"Info"</span>, page);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>编写Mapper.xml</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 实现快速查询客户（模糊查询） --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"quickQuery"</span> <span class="attr">parameterType</span>=<span class="string">"Customer"</span> <span class="attr">resultMap</span>=<span class="string">"BaseResultMap"</span>&gt;</span></span><br><span class="line">    SELECT * FROM tb_customer WHERE 1=1</span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"name != null"</span>&gt;</span></span><br><span class="line">        AND name LIKE CONCAT('%', #&#123;name&#125;, '%')</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>导航栏快速查询功能除了使用LIKE实现根据客户名称对客户进行模糊查询外，其它逻辑和加载客户信息列表的逻辑基本相同。</p><h3 id="实现客户信息的添加"><a href="#实现客户信息的添加" class="headerlink" title="实现客户信息的添加"></a>实现客户信息的添加</h3><p>添加客户信息，就是将JSP中提交的表单数据持久化到数据库中。</p><p><strong>创建表结构</strong></p><p>SQL语句请查看项目中resources目录下的sql_customer.sql文件</p><p>除了创建表，我们同样要创建bean对象（查看bean包下的Customer），并提供属性setter和getter方法。（注意尽量保持bean属性参数和表字段名称对应相等）</p><p><strong>编写Controller层</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//添加客户</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/add"</span>)</span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Message <span class="title">addCustomer</span><span class="params">(Customer customer)</span> </span>&#123;</span><br><span class="line">    customerservice.addCustomer(customer);</span><br><span class="line">    <span class="keyword">return</span> Message.success();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当点击添加客户模态框的保存按钮，表单中的所有数据都应该被持久化到数据库中，而要知道表单中的参数有很多，我们直接在请求映射方法的参数列表中写参数显然是不可取的，那么我们如果写一个bean对象，Spring就会根据这个bean对象中的属性和JSP表单中的参数进行对应，如果完全对应那么请求方法会正常执行，一但有某个参数不对应，那么就会报错。（注意我们表单中并不需要指定<code>id</code>主键值，因为设计表时已经指定了该<code>id</code>主键为自增长，即使不指定值，<code>id</code>依然会自增，你指定了却可能会产生错误，因为需要保证每次的<code>id</code>值都是递增的）。这里返回了一个自定义的Message类（封装了返回的状态，成功或者失败的信息，主体数据），并使@ResponseBody注解将它以JSON数据的形式返回。</p><p><strong>编写Mapper.xml</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 添加客户 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"addCustomer"</span> <span class="attr">parameterType</span>=<span class="string">"Customer"</span>&gt;</span></span><br><span class="line">    insert into tb_customer(name, telephone, address, remark) </span><br><span class="line">    values(#&#123;name&#125;, #&#123;telephone&#125;, #&#123;address&#125;, #&#123;remark&#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如上这仍然是普通的SQL语句，注意<code>parameterType</code>如上我们设置为<code>Customer</code>其实代表的是<code>pers.hmc.bean.Customer</code>这个对象，因为我们已经在<code>mabatis-config.xml</code>中启用了mybatis的别名配置。SQL插入语句中不需要指定<code>id</code>这个字段，原因是我们已经配置了<code>id</code>为自增主键。</p><h3 id="实现更新客户信息"><a href="#实现更新客户信息" class="headerlink" title="实现更新客户信息"></a>实现更新客户信息</h3><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/********************列表中 编辑按钮 功能实现********************/</span></span><br><span class="line">$(document).on(<span class="string">"click"</span>,<span class="string">".edit_btn"</span>,function()&#123;</span><br><span class="line">    <span class="comment">//查询出客户信息并赋值到 更新客户信息模态框</span></span><br><span class="line">    getCustomer($(<span class="keyword">this</span>).attr(<span class="string">"editBtn-id"</span>));</span><br><span class="line">    <span class="comment">//把客户的id传递给更新客户信息模态框的更新按钮，方便后面执行 更新 操作</span></span><br><span class="line">    $(<span class="string">"#cust_update_btn"</span>).attr(<span class="string">"edit-id"</span>,$(<span class="keyword">this</span>).attr(<span class="string">"editBtn-id"</span>));</span><br><span class="line">    $(<span class="string">"#custUpdateModal"</span>).modal(&#123;</span><br><span class="line">        backdrop : <span class="string">"static"</span></span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="function">function <span class="title">getCustomer</span><span class="params">(id)</span></span>&#123;</span><br><span class="line">    $.ajax(&#123;</span><br><span class="line">        url:<span class="string">"$&#123;APP_PATH&#125;/customer/"</span>+id,</span><br><span class="line">        type:<span class="string">"GET"</span>,</span><br><span class="line">        success:function(result)&#123;</span><br><span class="line">            <span class="keyword">var</span> customerDate = result.extend.custInfo;</span><br><span class="line">            $(<span class="string">"#name_update_input"</span>).val(customerDate.name);</span><br><span class="line">            $(<span class="string">"#telephone_update_input"</span>).val(customerDate.telephone);</span><br><span class="line">            $(<span class="string">"#address_update_input"</span>).val(customerDate.address);</span><br><span class="line">            $(<span class="string">"#remark_update_input"</span>).val(customerDate.remark);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/******更新客户信息模态框  更新  按钮功能实现,更新客户信息******/</span></span><br><span class="line">$(<span class="string">"#cust_update_btn"</span>).click(function()&#123;</span><br><span class="line">    $.ajax(&#123;</span><br><span class="line">        url:<span class="string">"$&#123;APP_PATH&#125;/customer/"</span>+$(<span class="keyword">this</span>).attr(<span class="string">"edit-id"</span>),</span><br><span class="line">        type:<span class="string">"POST"</span>,</span><br><span class="line">        data:$(<span class="string">"#custUpdateModal form"</span>).serialize()+<span class="string">"&amp;_method=PUT"</span>,</span><br><span class="line">        success:function(result)&#123;</span><br><span class="line">            $(<span class="string">"#custUpdateModal"</span>).modal(<span class="string">"hide"</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(Quick_input == <span class="keyword">null</span>&amp;&amp;flag == <span class="keyword">true</span>)&#123;</span><br><span class="line">                to_page(currentPage);</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(Quick_input !== <span class="keyword">null</span>&amp;&amp;flag == <span class="keyword">true</span>)&#123;</span><br><span class="line">                $(<span class="string">"#quickQuery-input"</span>).val(<span class="string">""</span>);</span><br><span class="line">                to_page(currentPage);</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(Quick_input !== <span class="keyword">null</span>&amp;&amp;flag == <span class="keyword">false</span>)&#123;</span><br><span class="line">                $(<span class="string">"#quickQuery-input"</span>).val(Quick_input);</span><br><span class="line">                quickQuery(currentPage);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            setTimeout(function()&#123; $(<span class="string">"#UpdateSuccessModal"</span>).modal(&#123;</span><br><span class="line">                backdrop : <span class="string">"static"</span></span><br><span class="line">            &#125;); &#125;, <span class="number">1000</span>);</span><br><span class="line">            setTimeout(function()&#123; $(<span class="string">"#UpdateSuccessModal"</span>).modal(</span><br><span class="line">                <span class="string">"hide"</span>); &#125;, <span class="number">2500</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>编辑按钮处使用到了Bootstrap的模态框功能，在解析并展示数据的方法cust_table()中会将当前客户的id值存储在editBtn-id属性中，当点击编辑按钮时，就会调用getCustomer($(this).attr(“editBtn-id”))方法并将当前客户的id传入方法中，通过ajax请求调用Controller的映射方法，根据客户id查询到当前客户的数据解析展示在模态框中，当修改完数据后，点击模态框中的更新按钮，便将数据更新到数据库中。</p><p><strong>编写Controller层</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//根据客户id查询客户信息</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/customer/&#123;id&#125;"</span>,method=RequestMethod.GET)</span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Message <span class="title">selectById</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span>Long id) </span>&#123;</span><br><span class="line">    Customer customer = customerservice.selectById(id);</span><br><span class="line">    <span class="keyword">return</span> Message.success().add(<span class="string">"custInfo"</span>, customer);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//更新客户信息</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(value= <span class="string">"/customer/&#123;id&#125;"</span>,method=RequestMethod.PUT)</span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Message <span class="title">update</span><span class="params">(Customer customer)</span> </span>&#123;</span><br><span class="line">    customerservice.update(customer);</span><br><span class="line">    <span class="keyword">return</span> Message.success();</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当点击编辑按钮时，ajax请求了selectById映射方法，根据id调用service层得到当前客户的数据，并将客户数据以JSON数据的形式返回给jsp页面，最后ajax会走success方法，从返回的数据<code>success:function(result)</code>中通过<code>result.xx</code>的方式取出来并通过jquery的<code>val()</code>方式赋值到指定的位置，那么就实现了数据回显（将数据显示在编辑模态框）。当修改完数据点击模态框中的更新按钮，ajax请求会请求update方法，根据id调用service层完成客户信息的更新操作。</p><p><strong>编写Mapper.xml</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 根据客户id查询客户信息 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectById"</span> <span class="attr">parameterType</span>=<span class="string">"Long"</span> <span class="attr">resultType</span>=<span class="string">"Customer"</span>&gt;</span></span><br><span class="line">    select * from tb_customer where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 更新客户信息 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">"update"</span> <span class="attr">parameterType</span>=<span class="string">"Customer"</span>&gt;</span></span><br><span class="line">    update tb_customer</span><br><span class="line">    set id = #&#123;id&#125;, </span><br><span class="line">    name = #&#123;name&#125;, </span><br><span class="line">    telephone = #&#123;telephone&#125;, </span><br><span class="line">    address = #&#123;address&#125;, </span><br><span class="line">    remark = #&#123;remark&#125; </span><br><span class="line">    where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="实现删除客户信息"><a href="#实现删除客户信息" class="headerlink" title="实现删除客户信息"></a>实现删除客户信息</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/******************删除模态框 确认按钮 功能实现******************/</span></span><br><span class="line">$(<span class="string">"#confirm_btn"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> id = $(<span class="keyword">this</span>).attr(<span class="string">"delBtn-id"</span>);<span class="comment">//获取当前客户的id</span></span><br><span class="line">    $.ajax(&#123;</span><br><span class="line">        url:<span class="string">"$&#123;APP_PATH&#125;/customer/"</span>+id,</span><br><span class="line">        type:<span class="string">"DELETE"</span>,</span><br><span class="line">        success:<span class="function"><span class="keyword">function</span>(<span class="params">result</span>)</span>&#123;</span><br><span class="line">            $(<span class="string">"#custDeleteModal"</span>).modal(<span class="string">"hide"</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//回到更新了客户信息的页面</span></span><br><span class="line">            <span class="keyword">if</span>(Quick_input == <span class="literal">null</span>&amp;&amp;flag == <span class="literal">true</span>)&#123;</span><br><span class="line">                to_page(currentPage);</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(Quick_input !== <span class="literal">null</span>&amp;&amp;flag == <span class="literal">true</span>)&#123;</span><br><span class="line">                $(<span class="string">"#quickQuery-input"</span>).val(<span class="string">""</span>);</span><br><span class="line">                to_page(currentPage);</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(Quick_input !== <span class="literal">null</span>&amp;&amp;flag == <span class="literal">false</span>)&#123;</span><br><span class="line">                $(<span class="string">"#quickQuery-input"</span>).val(Quick_input);</span><br><span class="line">                quickQuery(currentPage);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; $(<span class="string">"#DeleteSuccessModal"</span>).modal(&#123;</span><br><span class="line">                backdrop : <span class="string">"static"</span></span><br><span class="line">            &#125;); &#125;, <span class="number">1000</span>);</span><br><span class="line">            setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; $(<span class="string">"#DeleteSuccessModal"</span>).modal(</span><br><span class="line">                <span class="string">"hide"</span>); &#125;, <span class="number">2500</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><strong>编写Controller层</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//根据客户id删除客户</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(value=<span class="string">"/customer/&#123;id&#125;"</span>,method=RequestMethod.DELETE)</span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Message <span class="title">delete</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span>Long id) </span>&#123;</span><br><span class="line">    customerservice.delete(id);</span><br><span class="line">    <span class="keyword">return</span> Message.success();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>删除按钮处使用到了Bootstrap的模态框功能，在解析并展示数据的方法cust_table()中会将当前客户的id值存储在delBtn-id属性中，当点击删除按钮时会弹出确认提示框，当点击确认按钮时，会通过ajax请求调用Controller的映射方法,删除功能只需要根据点击提示框确认按钮时获取到的<code>id</code>值，在SQL的<code>delete</code>语句中<code>where</code>这个id值，即可以实现根据id删除客户信息。</p><p><strong>编写Mapper.xml</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 根据id删除客户 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">"delete"</span> <span class="attr">parameterType</span>=<span class="string">"Long"</span>&gt;</span></span><br><span class="line">    delete from tb_customer where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如此，还是一个再普通不过的SQL语句，既可以实现根据id删除的功能。</p><h3 id="项目运行效果："><a href="#项目运行效果：" class="headerlink" title="项目运行效果："></a>项目运行效果：</h3><p><img src="//tvax4.sinaimg.cn/large/75e34a99gy1genn6acywjj21hc0svhdw.jpg" alt=""></p><p><img src="//tvax2.sinaimg.cn/large/75e34a99gy1genn9ualmwj21hc0jegn5.jpg" alt=""></p><p><img src="//tva2.sinaimg.cn/large/75e34a99gy1genn7vohrhj21hc0k3wg5.jpg" alt=""></p><p><img src="//tva4.sinaimg.cn/large/75e34a99gy1gennakfxe4j21hc0ipdhi.jpg" alt=""></p><p><img src="//tvax2.sinaimg.cn/large/75e34a99gy1gennbmpsyaj21hc0j7abl.jpg" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="后端开发" scheme="https://hmcoding.cn/categories/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="Java" scheme="https://hmcoding.cn/tags/Java/"/>
    
      <category term="Spring" scheme="https://hmcoding.cn/tags/Spring/"/>
    
      <category term="SpringMVC" scheme="https://hmcoding.cn/tags/SpringMVC/"/>
    
      <category term="MyBatis" scheme="https://hmcoding.cn/tags/MyBatis/"/>
    
      <category term="JavaScript" scheme="https://hmcoding.cn/tags/JavaScript/"/>
    
  </entry>
  
</feed>
